---------------------
subunit release notes
---------------------

NEXT (In development)
---------------------

The Subunit Python test runner ``python -m subunit.run`` can now report the
test ids and also filter via a test id list file thanks to improvements in
``testtools.run``. See the testtools manual, or testrepository - a major
user of such functionality.

IMPROVEMENTS
~~~~~~~~~~~~

* The ``subunit.run`` Python module supports ``-l`` and ``--load-list`` as
  per ``testtools.run``. This required a dependency bump due to a small
  API change in ``testtools``. (Robert Collins)


0.0.6
-----

This release of subunit fixes a number of unicode related bugs. This depends on
testtools 0.9.4 and will not function without it. Thanks to Tres Seaver there
is also an optional native setup.py file for use with easy_install and the
like.

BUG FIXES
~~~~~~~~~

* Be consistent about delivering unicode content to testtools StringException
  class which has become (appropriately) conservative. (Robert Collins)

* Fix incorrect reference to subunit_test_failf in c/README.
  (Brad Hards, #524341)

* Fix incorrect ordering of tags method parameters in TestResultDecorator. This
  is purely cosmetic as the parameters are passed down with no interpretation.
  (Robert Collins, #537611)

* Old style tracebacks with no encoding info are now treated as UTF8 rather
  than some-random-codec-like-ascii. (Robert Collins)

* On windows, ProtocolTestCase and TestProtocolClient will set their streams to
  binary mode by calling into msvcrt; this avoids having their input or output
  mangled by the default line ending translation on that platform.
  (Robert Collins, Martin [gz], #579296)

IMPROVEMENTS
~~~~~~~~~~~~

* Subunit now has a setup.py for python deployments that are not using
  distribution packages. (Tres Seaver, #538181)

* Subunit now supports test discovery by building on the testtools support for
  it. You can take advantage of it with "python -m subunit.run discover [path]"
  and see "python -m subunit.run discover --help" for more options.

* Subunit now uses the improved unicode support in testtools when outputting
  non-details based test information; this should consistently UTF8 encode such
  strings.

* The Python TestProtocolClient now flushes output on startTest and stopTest.
  (Martin [gz]).


0.0.5
-----

BUG FIXES
~~~~~~~~~

* make check was failing if subunit wasn't installed due to a missing include
  path for the test program test_child.

* make distcheck was failing due to a missing $(top_srcdir) rune.

IMPROVEMENTS
~~~~~~~~~~~~

* New filter `subunit-notify` that will show a notification window with test 
  statistics when the test run finishes.

* subunit.run will now pipe its output to the command in the 
  SUBUNIT_FORMATTER environment variable, if set.

0.0.4
-----

BUG FIXES
~~~~~~~~~

* subunit2junitxml -f required a value, this is now fixed and -f acts as a
  boolean switch with no parameter.

* Building with autoconf 2.65 is now supported.


0.0.3
-----

  CHANGES:
  
    * License change, by unanimous agreement of contributors to BSD/Apache
      License Version 2.0. This makes Subunit compatible with more testing
      frameworks.

  IMPROVEMENTS:

    * CPPUnit is now directly supported: subunit builds a cppunit listener
      ``libcppunit-subunit``. 

    * In the python API ``addExpectedFailure`` and ``addUnexpectedSuccess``
      from python 2.7/3.1 are now supported. ``addExpectedFailure`` is
      serialised as ``xfail``, and ``addUnexpectedSuccess`` as ``success``.
      The ``ProtocolTestCase`` parser now calls outcomes using an extended
      API that permits attaching arbitrary MIME resources such as text files
      log entries and so on. This extended API is being developed with the
      Python testing community, and is in flux. ``TestResult`` objects that
      do not support the API will be detected and transparently downgraded
      back to the regular Python unittest API.

    * INSTALLDIRS can be set to control the perl MakeMaker 'INSTALLDIRS'
      viarable when installing.

    * Multipart test outcomes are tentatively supported; the exact protocol
      for them, both serialiser and object is not yet finalised. Testers and
      early adopters are sought. As part of this and also in an attempt to
      provider a more precise focus on the wire protocol and toolchain, 
      Subunit now depends on testtools (http://launchpad.net/testtools)
      release 0.9.0 or newer.

    * subunit2junitxml supports a new option, --forward which causes it
      to forward the raw subunit stream in a similar manner to tee. This
      is used with the -o option to both write a xml report and get some
      other subunit filter to process the stream.

    * The C library now has ``subunit_test_skip``.

  BUG FIXES:

    * Install progress_model.py correctly.

    * Non-gcc builds will no longer try to use gcc specific flags.
      (Thanks trondn-norbye)

  API CHANGES:

  INTERNALS:

0.0.2
-----

  CHANGES:

  IMPROVEMENTS:

    * A number of filters now support ``--no-passthrough`` to cause all
      non-subunit content to be discarded. This is useful when precise control
      over what is output is required - such as with subunit2junitxml.

    * A small perl parser is now included, and a new ``subunit-diff`` tool
      using that is included. (Jelmer Vernooij)

    * Subunit streams can now include optional, incremental lookahead
      information about progress. This allows reporters to make estimates
      about completion, when such information is available. See the README
      under ``progress`` for more details.

    * ``subunit-filter`` now supports regex filtering via ``--with`` and
      ``without`` options. (Martin Pool)

    * ``subunit2gtk`` has been added, a filter that shows a GTK summary of a
      test stream.

    * ``subunit2pyunit`` has a --progress flag which will cause the bzrlib
      test reporter to be used, which has a textual progress bar. This requires
      a recent bzrlib as a minor bugfix was required in bzrlib to support this.

    * ``subunit2junitxml`` has been added. This filter converts a subunit
      stream to a single JUnit style XML stream using the pyjunitxml
      python library.

    * The shell functions support skipping via ``subunit_skip_test`` now.

  BUG FIXES:

    * ``xfail`` outcomes are now passed to python TestResult's via
      addExpectedFailure if it is present on the TestResult. Python 2.6 and
      earlier which do not have this function will have ``xfail`` outcomes
      passed through as success outcomes as earlier versions of subunit did.

  API CHANGES:

    * tags are no longer passed around in python via the ``TestCase.tags``
      attribute. Instead ``TestResult.tags(new_tags, gone_tags)`` is called,
      and like in the protocol, if called while a test is active only applies
      to that test. (Robert Collins)

    * ``TestResultFilter`` takes a new optional constructor parameter 
      ``filter_predicate``.  (Martin Pool)

    * When a progress: directive is encountered in a subunit stream, the
      python bindings now call the ``progress(offset, whence)`` method on
      ``TestResult``.

    * When a time: directive is encountered in a subunit stream, the python
      bindings now call the ``time(seconds)`` method on ``TestResult``.

  INTERNALS:

    * (python) Added ``subunit.test_results.AutoTimingTestResultDecorator``. Most
      users of subunit will want to wrap their ``TestProtocolClient`` objects
      in this decorator to get test timing data for performance analysis.

    * (python) ExecTestCase supports passing arguments to test scripts.

    * (python) New helper ``subunit.test_results.HookedTestResultDecorator``
      which can be used to call some code on every event, without having to
      implement all the event methods.

    * (python) ``TestProtocolClient.time(a_datetime)`` has been added which
      causes a timestamp to be output to the stream.
