#!/usr/bin/env python

APPNAME = 'tdb'
VERSION = '1.2.9'

blddir = 'bin'

import sys, os

# find the buildtools directory
srcdir = '.'
while not os.path.exists(srcdir+'/buildtools') and len(srcdir.split('/')) < 5:
    srcdir = '../' + srcdir
sys.path.insert(0, srcdir + '/buildtools/wafsamba')

import wafsamba, samba_dist, Options, Logs

samba_dist.DIST_DIRS('lib/tdb:. lib/replace:lib/replace buildtools:buildtools')

def set_options(opt):
    opt.BUILTIN_DEFAULT('replace')
    opt.PRIVATE_EXTENSION_DEFAULT('tdb', noextension='tdb')
    opt.RECURSE('lib/replace')
    if opt.IN_LAUNCH_DIR():
        opt.add_option('--disable-python',
                       help=("disable the pytdb module"),
                       action="store_true", dest='disable_python', default=False)


def configure(conf):
    conf.RECURSE('lib/replace')

    conf.env.standalone_tdb = conf.IN_LAUNCH_DIR()

    if not conf.env.standalone_tdb:
        if conf.CHECK_BUNDLED_SYSTEM('tdb', minversion=VERSION,
                                     implied_deps='replace'):
            conf.define('USING_SYSTEM_TDB', 1)
            if conf.CHECK_BUNDLED_SYSTEM_PYTHON('pytdb', 'tdb', minversion=VERSION):
                conf.define('USING_SYSTEM_PYTDB', 1)

    conf.env.disable_python = getattr(Options.options, 'disable_python', False)

    conf.CHECK_XSLTPROC_MANPAGES()

    if not conf.env.disable_python:
        # also disable if we don't have the python libs installed
        conf.check_tool('python')
        conf.check_python_version((2,4,2))
        conf.SAMBA_CHECK_PYTHON_HEADERS(mandatory=False)
        if not conf.env.HAVE_PYTHON_H:
            Logs.warn('Disabling pytdb as python devel libs not found')
            conf.env.disable_python = True

    conf.SAMBA_CONFIG_H()

def build(bld):
    bld.RECURSE('lib/replace')

    COMMON_SRC = bld.SUBDIR('common',
                            '''check.c error.c tdb.c traverse.c
                            freelistcheck.c lock.c dump.c freelist.c
                            io.c open.c transaction.c hash.c summary.c''')

    if bld.env.standalone_tdb:
        bld.env.PKGCONFIGDIR = '${LIBDIR}/pkgconfig'
        bld.PKG_CONFIG_FILES('tdb.pc', vnum=VERSION)
        private_library = False
    else:
        private_library = True

    if not bld.CONFIG_SET('USING_SYSTEM_TDB'):
        bld.SAMBA_LIBRARY('tdb',
                          COMMON_SRC,
                          deps='replace',
                          includes='include',
                          abi_directory='ABI',
                          abi_match='tdb_*',
                          hide_symbols=True,
                          vnum=VERSION,
                          public_headers='include/tdb.h',
                          public_headers_install=not private_library,
                          private_library=private_library)

        bld.SAMBA_BINARY('tdbtorture',
                         'tools/tdbtorture.c',
                         'tdb',
                         install=False)

        bld.SAMBA_BINARY('tdbrestore',
                         'tools/tdbrestore.c',
                         'tdb', manpages='manpages/tdbrestore.8')

        bld.SAMBA_BINARY('tdbdump',
                         'tools/tdbdump.c',
                         'tdb', manpages='manpages/tdbdump.8')

        bld.SAMBA_BINARY('tdbbackup',
                         'tools/tdbbackup.c',
                         'tdb',
                         manpages='manpages/tdbbackup.8')

        bld.SAMBA_BINARY('tdbtool',
                         'tools/tdbtool.c',
                         'tdb', manpages='manpages/tdbtool.8')

    if not bld.CONFIG_SET('USING_SYSTEM_PYTDB'):
        bld.SAMBA_PYTHON('pytdb',
                         'pytdb.c',
                         deps='tdb',
                         enabled=not bld.env.disable_python,
                         realname='tdb.so',
                         cflags='-DPACKAGE_VERSION=\"%s\"' % VERSION)



def test(ctx):
    '''run tdb testsuite'''
    import Utils, samba_utils, shutil
    test_prefix = "%s/st" % (Utils.g_module.blddir)
    shutil.rmtree(test_prefix, ignore_errors=True)
    os.makedirs(test_prefix)
    os.environ['TEST_DATA_PREFIX'] = test_prefix
    cmd = os.path.join(Utils.g_module.blddir, 'tdbtorture')
    ret = samba_utils.RUN_COMMAND(cmd)
    print("testsuite returned %d" % ret)
    sys.exit(ret)

def dist():
    '''makes a tarball for distribution'''
    samba_dist.dist()

def reconfigure(ctx):
    '''reconfigure if config scripts have changed'''
    import samba_utils
    samba_utils.reconfigure(ctx)
