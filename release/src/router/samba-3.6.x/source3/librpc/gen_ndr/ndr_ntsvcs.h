/* header auto-generated by pidl */

#include "librpc/ndr/libndr.h"
#include "librpc/gen_ndr/ntsvcs.h"

#ifndef _HEADER_NDR_ntsvcs
#define _HEADER_NDR_ntsvcs

#define NDR_NTSVCS_UUID "8d9f4e40-a03d-11ce-8f69-08003e30051b"
#define NDR_NTSVCS_VERSION 1.0
#define NDR_NTSVCS_NAME "ntsvcs"
#define NDR_NTSVCS_HELPSTRING "Plug and Play services"
extern const struct ndr_interface_table ndr_table_ntsvcs;
#define NDR_PNP_DISCONNECT (0x00)

#define NDR_PNP_CONNECT (0x01)

#define NDR_PNP_GETVERSION (0x02)

#define NDR_PNP_GETGLOBALSTATE (0x03)

#define NDR_PNP_INITDETECTION (0x04)

#define NDR_PNP_REPORTLOGON (0x05)

#define NDR_PNP_VALIDATEDEVICEINSTANCE (0x06)

#define NDR_PNP_GETROOTDEVICEINSTANCE (0x07)

#define NDR_PNP_GETRELATEDDEVICEINSTANCE (0x08)

#define NDR_PNP_ENUMERATESUBKEYS (0x09)

#define NDR_PNP_GETDEVICELIST (0x0a)

#define NDR_PNP_GETDEVICELISTSIZE (0x0b)

#define NDR_PNP_GETDEPTH (0x0c)

#define NDR_PNP_GETDEVICEREGPROP (0x0d)

#define NDR_PNP_SETDEVICEREGPROP (0x0e)

#define NDR_PNP_GETCLASSINSTANCE (0x0f)

#define NDR_PNP_CREATEKEY (0x10)

#define NDR_PNP_DELETEREGISTRYKEY (0x11)

#define NDR_PNP_GETCLASSCOUNT (0x12)

#define NDR_PNP_GETCLASSNAME (0x13)

#define NDR_PNP_DELETECLASSKEY (0x14)

#define NDR_PNP_GETINTERFACEDEVICEALIAS (0x15)

#define NDR_PNP_GETINTERFACEDEVICELIST (0x16)

#define NDR_PNP_GETINTERFACEDEVICELISTSIZE (0x17)

#define NDR_PNP_REGISTERDEVICECLASSASSOCIATION (0x18)

#define NDR_PNP_UNREGISTERDEVICECLASSASSOCIATION (0x19)

#define NDR_PNP_GETCLASSREGPROP (0x1a)

#define NDR_PNP_SETCLASSREGPROP (0x1b)

#define NDR_PNP_CREATEDEVINST (0x1c)

#define NDR_PNP_DEVICEINSTANCEACTION (0x1d)

#define NDR_PNP_GETDEVICESTATUS (0x1e)

#define NDR_PNP_SETDEVICEPROBLEM (0x1f)

#define NDR_PNP_DISABLEDEVINST (0x20)

#define NDR_PNP_UNINSTALLDEVINST (0x21)

#define NDR_PNP_ADDID (0x22)

#define NDR_PNP_REGISTERDRIVER (0x23)

#define NDR_PNP_QUERYREMOVE (0x24)

#define NDR_PNP_REQUESTDEVICEEJECT (0x25)

#define NDR_PNP_ISDOCKSTATIONPRESENT (0x26)

#define NDR_PNP_REQUESTEJECTPC (0x27)

#define NDR_PNP_HWPROFFLAGS (0x28)

#define NDR_PNP_GETHWPROFINFO (0x29)

#define NDR_PNP_ADDEMPTYLOGCONF (0x2a)

#define NDR_PNP_FREELOGCONF (0x2b)

#define NDR_PNP_GETFIRSTLOGCONF (0x2c)

#define NDR_PNP_GETNEXTLOGCONF (0x2d)

#define NDR_PNP_GETLOGCONFPRIORITY (0x2e)

#define NDR_PNP_ADDRESDES (0x2f)

#define NDR_PNP_FREERESDES (0x30)

#define NDR_PNP_GETNEXTRESDES (0x31)

#define NDR_PNP_GETRESDESDATA (0x32)

#define NDR_PNP_GETRESDESDATASIZE (0x33)

#define NDR_PNP_MODIFYRESDES (0x34)

#define NDR_PNP_DETECTRESOURCELIMIT (0x35)

#define NDR_PNP_QUERYRESCONFLIST (0x36)

#define NDR_PNP_SETHWPROF (0x37)

#define NDR_PNP_QUERYARBITRATORFREEDATA (0x38)

#define NDR_PNP_QUERYARBITRATORFREESIZE (0x39)

#define NDR_PNP_RUNDETECTION (0x3a)

#define NDR_PNP_REGISTERNOTIFICATION (0x3b)

#define NDR_PNP_UNREGISTERNOTIFICATION (0x3c)

#define NDR_PNP_GETCUSTOMDEVPROP (0x3d)

#define NDR_PNP_GETVERSIONINTERNAL (0x3e)

#define NDR_PNP_GETBLOCKEDDRIVERINFO (0x3f)

#define NDR_PNP_GETSERVERSIDEDEVICEINSTALLFLAGS (0x40)

#define NDR_NTSVCS_CALL_COUNT (65)
void ndr_print_PNP_GetIdListFlags(struct ndr_print *ndr, const char *name, uint32_t r);
void ndr_print_PNP_HwProfInfo(struct ndr_print *ndr, const char *name, const struct PNP_HwProfInfo *r);
void ndr_print_PNP_Disconnect(struct ndr_print *ndr, const char *name, int flags, const struct PNP_Disconnect *r);
void ndr_print_PNP_Connect(struct ndr_print *ndr, const char *name, int flags, const struct PNP_Connect *r);
void ndr_print_PNP_GetVersion(struct ndr_print *ndr, const char *name, int flags, const struct PNP_GetVersion *r);
void ndr_print_PNP_GetGlobalState(struct ndr_print *ndr, const char *name, int flags, const struct PNP_GetGlobalState *r);
void ndr_print_PNP_InitDetection(struct ndr_print *ndr, const char *name, int flags, const struct PNP_InitDetection *r);
void ndr_print_PNP_ReportLogOn(struct ndr_print *ndr, const char *name, int flags, const struct PNP_ReportLogOn *r);
void ndr_print_PNP_ValidateDeviceInstance(struct ndr_print *ndr, const char *name, int flags, const struct PNP_ValidateDeviceInstance *r);
void ndr_print_PNP_GetRootDeviceInstance(struct ndr_print *ndr, const char *name, int flags, const struct PNP_GetRootDeviceInstance *r);
void ndr_print_PNP_GetRelatedDeviceInstance(struct ndr_print *ndr, const char *name, int flags, const struct PNP_GetRelatedDeviceInstance *r);
void ndr_print_PNP_EnumerateSubKeys(struct ndr_print *ndr, const char *name, int flags, const struct PNP_EnumerateSubKeys *r);
void ndr_print_PNP_GetDeviceList(struct ndr_print *ndr, const char *name, int flags, const struct PNP_GetDeviceList *r);
void ndr_print_PNP_GetDeviceListSize(struct ndr_print *ndr, const char *name, int flags, const struct PNP_GetDeviceListSize *r);
void ndr_print_PNP_GetDepth(struct ndr_print *ndr, const char *name, int flags, const struct PNP_GetDepth *r);
void ndr_print_PNP_GetDeviceRegProp(struct ndr_print *ndr, const char *name, int flags, const struct PNP_GetDeviceRegProp *r);
void ndr_print_PNP_SetDeviceRegProp(struct ndr_print *ndr, const char *name, int flags, const struct PNP_SetDeviceRegProp *r);
void ndr_print_PNP_GetClassInstance(struct ndr_print *ndr, const char *name, int flags, const struct PNP_GetClassInstance *r);
void ndr_print_PNP_CreateKey(struct ndr_print *ndr, const char *name, int flags, const struct PNP_CreateKey *r);
void ndr_print_PNP_DeleteRegistryKey(struct ndr_print *ndr, const char *name, int flags, const struct PNP_DeleteRegistryKey *r);
void ndr_print_PNP_GetClassCount(struct ndr_print *ndr, const char *name, int flags, const struct PNP_GetClassCount *r);
void ndr_print_PNP_GetClassName(struct ndr_print *ndr, const char *name, int flags, const struct PNP_GetClassName *r);
void ndr_print_PNP_DeleteClassKey(struct ndr_print *ndr, const char *name, int flags, const struct PNP_DeleteClassKey *r);
void ndr_print_PNP_GetInterfaceDeviceAlias(struct ndr_print *ndr, const char *name, int flags, const struct PNP_GetInterfaceDeviceAlias *r);
void ndr_print_PNP_GetInterfaceDeviceList(struct ndr_print *ndr, const char *name, int flags, const struct PNP_GetInterfaceDeviceList *r);
void ndr_print_PNP_GetInterfaceDeviceListSize(struct ndr_print *ndr, const char *name, int flags, const struct PNP_GetInterfaceDeviceListSize *r);
void ndr_print_PNP_RegisterDeviceClassAssociation(struct ndr_print *ndr, const char *name, int flags, const struct PNP_RegisterDeviceClassAssociation *r);
void ndr_print_PNP_UnregisterDeviceClassAssociation(struct ndr_print *ndr, const char *name, int flags, const struct PNP_UnregisterDeviceClassAssociation *r);
void ndr_print_PNP_GetClassRegProp(struct ndr_print *ndr, const char *name, int flags, const struct PNP_GetClassRegProp *r);
void ndr_print_PNP_SetClassRegProp(struct ndr_print *ndr, const char *name, int flags, const struct PNP_SetClassRegProp *r);
void ndr_print_PNP_CreateDevInst(struct ndr_print *ndr, const char *name, int flags, const struct PNP_CreateDevInst *r);
void ndr_print_PNP_DeviceInstanceAction(struct ndr_print *ndr, const char *name, int flags, const struct PNP_DeviceInstanceAction *r);
void ndr_print_PNP_GetDeviceStatus(struct ndr_print *ndr, const char *name, int flags, const struct PNP_GetDeviceStatus *r);
void ndr_print_PNP_SetDeviceProblem(struct ndr_print *ndr, const char *name, int flags, const struct PNP_SetDeviceProblem *r);
void ndr_print_PNP_DisableDevInst(struct ndr_print *ndr, const char *name, int flags, const struct PNP_DisableDevInst *r);
void ndr_print_PNP_UninstallDevInst(struct ndr_print *ndr, const char *name, int flags, const struct PNP_UninstallDevInst *r);
void ndr_print_PNP_AddID(struct ndr_print *ndr, const char *name, int flags, const struct PNP_AddID *r);
void ndr_print_PNP_RegisterDriver(struct ndr_print *ndr, const char *name, int flags, const struct PNP_RegisterDriver *r);
void ndr_print_PNP_QueryRemove(struct ndr_print *ndr, const char *name, int flags, const struct PNP_QueryRemove *r);
void ndr_print_PNP_RequestDeviceEject(struct ndr_print *ndr, const char *name, int flags, const struct PNP_RequestDeviceEject *r);
void ndr_print_PNP_IsDockStationPresent(struct ndr_print *ndr, const char *name, int flags, const struct PNP_IsDockStationPresent *r);
void ndr_print_PNP_RequestEjectPC(struct ndr_print *ndr, const char *name, int flags, const struct PNP_RequestEjectPC *r);
void ndr_print_PNP_HwProfFlags(struct ndr_print *ndr, const char *name, int flags, const struct PNP_HwProfFlags *r);
void ndr_print_PNP_GetHwProfInfo(struct ndr_print *ndr, const char *name, int flags, const struct PNP_GetHwProfInfo *r);
void ndr_print_PNP_AddEmptyLogConf(struct ndr_print *ndr, const char *name, int flags, const struct PNP_AddEmptyLogConf *r);
void ndr_print_PNP_FreeLogConf(struct ndr_print *ndr, const char *name, int flags, const struct PNP_FreeLogConf *r);
void ndr_print_PNP_GetFirstLogConf(struct ndr_print *ndr, const char *name, int flags, const struct PNP_GetFirstLogConf *r);
void ndr_print_PNP_GetNextLogConf(struct ndr_print *ndr, const char *name, int flags, const struct PNP_GetNextLogConf *r);
void ndr_print_PNP_GetLogConfPriority(struct ndr_print *ndr, const char *name, int flags, const struct PNP_GetLogConfPriority *r);
void ndr_print_PNP_AddResDes(struct ndr_print *ndr, const char *name, int flags, const struct PNP_AddResDes *r);
void ndr_print_PNP_FreeResDes(struct ndr_print *ndr, const char *name, int flags, const struct PNP_FreeResDes *r);
void ndr_print_PNP_GetNextResDes(struct ndr_print *ndr, const char *name, int flags, const struct PNP_GetNextResDes *r);
void ndr_print_PNP_GetResDesData(struct ndr_print *ndr, const char *name, int flags, const struct PNP_GetResDesData *r);
void ndr_print_PNP_GetResDesDataSize(struct ndr_print *ndr, const char *name, int flags, const struct PNP_GetResDesDataSize *r);
void ndr_print_PNP_ModifyResDes(struct ndr_print *ndr, const char *name, int flags, const struct PNP_ModifyResDes *r);
void ndr_print_PNP_DetectResourceLimit(struct ndr_print *ndr, const char *name, int flags, const struct PNP_DetectResourceLimit *r);
void ndr_print_PNP_QueryResConfList(struct ndr_print *ndr, const char *name, int flags, const struct PNP_QueryResConfList *r);
void ndr_print_PNP_SetHwProf(struct ndr_print *ndr, const char *name, int flags, const struct PNP_SetHwProf *r);
void ndr_print_PNP_QueryArbitratorFreeData(struct ndr_print *ndr, const char *name, int flags, const struct PNP_QueryArbitratorFreeData *r);
void ndr_print_PNP_QueryArbitratorFreeSize(struct ndr_print *ndr, const char *name, int flags, const struct PNP_QueryArbitratorFreeSize *r);
void ndr_print_PNP_RunDetection(struct ndr_print *ndr, const char *name, int flags, const struct PNP_RunDetection *r);
void ndr_print_PNP_RegisterNotification(struct ndr_print *ndr, const char *name, int flags, const struct PNP_RegisterNotification *r);
void ndr_print_PNP_UnregisterNotification(struct ndr_print *ndr, const char *name, int flags, const struct PNP_UnregisterNotification *r);
void ndr_print_PNP_GetCustomDevProp(struct ndr_print *ndr, const char *name, int flags, const struct PNP_GetCustomDevProp *r);
void ndr_print_PNP_GetVersionInternal(struct ndr_print *ndr, const char *name, int flags, const struct PNP_GetVersionInternal *r);
void ndr_print_PNP_GetBlockedDriverInfo(struct ndr_print *ndr, const char *name, int flags, const struct PNP_GetBlockedDriverInfo *r);
void ndr_print_PNP_GetServerSideDeviceInstallFlags(struct ndr_print *ndr, const char *name, int flags, const struct PNP_GetServerSideDeviceInstallFlags *r);
#endif /* _HEADER_NDR_ntsvcs */
