/* header auto-generated by pidl */

#ifndef _PIDL_HEADER_spoolss
#define _PIDL_HEADER_spoolss

#include <stdint.h>

#include "libcli/util/ntstatus.h"

#include "librpc/gen_ndr/misc.h"
#include "librpc/gen_ndr/security.h"
#include "librpc/gen_ndr/winreg.h"
#define spoolss_security_descriptor security_descriptor
#ifndef _HEADER_spoolss
#define _HEADER_spoolss

#define PRINTER_STATUS_OK	( 0x00000000 )
#define JOB_STATUS_QUEUED	( 0x0000 )
#define MAXDEVICENAME	( 32 )
#define PRINTER_ENUM_ICONMASK	( (PRINTER_ENUM_ICON1|PRINTER_ENUM_ICON2|PRINTER_ENUM_ICON3|PRINTER_ENUM_ICON4|PRINTER_ENUM_ICON5|PRINTER_ENUM_ICON6|PRINTER_ENUM_ICON7|PRINTER_ENUM_ICON8) )
#define SPL_ARCH_WIN40	( "WIN40" )
#define SPL_ARCH_W32X86	( "W32X86" )
#define SPL_ARCH_W32MIPS	( "W32MIPS" )
#define SPL_ARCH_W32ALPHA	( "W32ALPHA" )
#define SPL_ARCH_W32PPC	( "W32PPC" )
#define SPL_ARCH_IA64	( "IA64" )
#define SPL_ARCH_X64	( "x64" )
#define SPOOLSS_ARCHITECTURE_ALL	( "All" )
#define SPOOLSS_ARCHITECTURE_ALL_CLUSTER	( "AllCluster" )
#define SPOOLSS_ARCHITECTURE_NT_X86	( "Windows NT x86" )
#define SPOOLSS_ARCHITECTURE_IA_64	( "Windows IA64" )
#define SPOOLSS_ARCHITECTURE_x64	( "Windows x64" )
#define SPOOLSS_ARCHITECTURE_4_0	( "Windows 4.0" )
#define SPOOLSS_DEFAULT_SERVER_PATH	( "C:\\WINDOWS\\system32\\spool" )
#define SPOOL_PRINTERDATA_KEY	( "PrinterDriverData" )
#define SPOOL_DSSPOOLER_KEY	( "DsSpooler" )
#define SPOOL_DSDRIVER_KEY	( "DsDriver" )
#define SPOOL_DSUSER_KEY	( "DsUser" )
#define SPOOL_PNPDATA_KEY	( "PnPData" )
#define SPOOL_OID_KEY	( "OID" )
#define SPOOL_REG_ASSETNUMBER	( "assetNumber" )
#define SPOOL_REG_BYTESPERMINUTE	( "bytesPerMinute" )
#define SPOOL_REG_DEFAULTPRIORITY	( "defaultPriority" )
#define SPOOL_REG_DESCRIPTION	( "description" )
#define SPOOL_REG_DRIVERNAME	( "driverName" )
#define SPOOL_REG_DRIVERVERSION	( "driverVersion" )
#define SPOOL_REG_FLAGS	( "flags" )
#define SPOOL_REG_LOCATION	( "location" )
#define SPOOL_REG_OPERATINGSYSTEM	( "operatingSystem" )
#define SPOOL_REG_OPERATINGSYSTEMHOTFIX	( "operatingSystemHotfix" )
#define SPOOL_REG_OPERATINGSYSTEMSERVICEPACK	( "operatingSystemServicePack" )
#define SPOOL_REG_OPERATINGSYSTEMVERSION	( "operatingSystemVersion" )
#define SPOOL_REG_PORTNAME	( "portName" )
#define SPOOL_REG_PRINTATTRIBUTES	( "printAttributes" )
#define SPOOL_REG_PRINTBINNAMES	( "printBinNames" )
#define SPOOL_REG_PRINTCOLLATE	( "printCollate" )
#define SPOOL_REG_PRINTCOLOR	( "printColor" )
#define SPOOL_REG_PRINTDUPLEXSUPPORTED	( "printDuplexSupported" )
#define SPOOL_REG_PRINTENDTIME	( "printEndTime" )
#define SPOOL_REG_PRINTERNAME	( "printerName" )
#define SPOOL_REG_PRINTFORMNAME	( "printFormName" )
#define SPOOL_REG_PRINTKEEPPRINTEDJOBS	( "printKeepPrintedJobs" )
#define SPOOL_REG_PRINTLANGUAGE	( "printLanguage" )
#define SPOOL_REG_PRINTMACADDRESS	( "printMACAddress" )
#define SPOOL_REG_PRINTMAXCOPIES	( "printMaxCopies" )
#define SPOOL_REG_PRINTMAXRESOLUTIONSUPPORTED	( "printMaxResolutionSupported" )
#define SPOOL_REG_PRINTMAXXEXTENT	( "printMaxXExtent" )
#define SPOOL_REG_PRINTMAXYEXTENT	( "printMaxYExtent" )
#define SPOOL_REG_PRINTMEDIAREADY	( "printMediaReady" )
#define SPOOL_REG_PRINTMEDIASUPPORTED	( "printMediaSupported" )
#define SPOOL_REG_PRINTMEMORY	( "printMemory" )
#define SPOOL_REG_PRINTMINXEXTENT	( "printMinXExtent" )
#define SPOOL_REG_PRINTMINYEXTENT	( "printMinYExtent" )
#define SPOOL_REG_PRINTNETWORKADDRESS	( "printNetworkAddress" )
#define SPOOL_REG_PRINTNOTIFY	( "printNotify" )
#define SPOOL_REG_PRINTNUMBERUP	( "printNumberUp" )
#define SPOOL_REG_PRINTORIENTATIONSSUPPORTED	( "printOrientationsSupported" )
#define SPOOL_REG_PRINTOWNER	( "printOwner" )
#define SPOOL_REG_PRINTPAGESPERMINUTE	( "printPagesPerMinute" )
#define SPOOL_REG_PRINTRATE	( "printRate" )
#define SPOOL_REG_PRINTRATEUNIT	( "printRateUnit" )
#define SPOOL_REG_PRINTSEPARATORFILE	( "printSeparatorFile" )
#define SPOOL_REG_PRINTSHARENAME	( "printShareName" )
#define SPOOL_REG_PRINTSPOOLING	( "printSpooling" )
#define SPOOL_REGVAL_PRINTWHILESPOOLING	( "PrintWhileSpooling" )
#define SPOOL_REGVAL_PRINTAFTERSPOOLED	( "PrintAfterSpooled" )
#define SPOOL_REGVAL_PRINTDIRECT	( "PrintDirect" )
#define SPOOL_REG_PRINTSTAPLINGSUPPORTED	( "printStaplingSupported" )
#define SPOOL_REG_PRINTSTARTTIME	( "printStartTime" )
#define SPOOL_REG_PRINTSTATUS	( "printStatus" )
#define SPOOL_REG_PRIORITY	( "priority" )
#define SPOOL_REG_SERVERNAME	( "serverName" )
#define SPOOL_REG_SHORTSERVERNAME	( "shortServerName" )
#define SPOOL_REG_UNCNAME	( "uNCName" )
#define SPOOL_REG_URL	( "url" )
#define SPOOL_REG_VERSIONNUMBER	( "versionNumber" )
#define SPL_LOCAL_PORT	( "Local Port" )
#define SPL_TCPIP_PORT	( "Standard TCP/IP Port" )
#define SPL_XCV_MONITOR_LOCALMON	( ",XcvMonitor Local Port" )
#define SPL_XCV_MONITOR_TCPMON	( ",XcvMonitor Standard TCP/IP Port" )
#define PRINTER_CHANGE_PRINTER	( 0x000000FF )
#define PRINTER_CHANGE_JOB	( 0x0000FF00 )
#define PRINTER_CHANGE_FORM	( (PRINTER_CHANGE_ADD_FORM|PRINTER_CHANGE_SET_FORM|PRINTER_CHANGE_DELETE_FORM) )
#define PRINTER_CHANGE_PORT	( (PRINTER_CHANGE_ADD_PORT|PRINTER_CHANGE_CONFIGURE_PORT|PRINTER_CHANGE_DELETE_PORT) )
#define PRINTER_CHANGE_PRINT_PROCESSOR	( 0x07000000 )
#define PRINTER_CHANGE_PRINTER_DRIVER	( (PRINTER_CHANGE_ADD_PRINTER_DRIVER|PRINTER_CHANGE_SET_PRINTER_DRIVER|PRINTER_CHANGE_DELETE_PRINTER_DRIVER) )
#define PRINTER_CHANGE_ALL	( (PRINTER_CHANGE_PRINTER|PRINTER_CHANGE_JOB|PRINTER_CHANGE_FORM|PRINTER_CHANGE_PORT|PRINTER_CHANGE_PRINT_PROCESSOR|PRINTER_CHANGE_PRINTER_DRIVER) )
#define SERVER_ALL_ACCESS	( SEC_STD_REQUIRED|SERVER_ACCESS_ADMINISTER|SERVER_ACCESS_ENUMERATE )
#define SERVER_READ	( SEC_STD_READ_CONTROL|SERVER_ACCESS_ENUMERATE )
#define SERVER_WRITE	( STANDARD_RIGHTS_WRITE_ACCESS|SERVER_ACCESS_ADMINISTER|SERVER_ACCESS_ENUMERATE )
#define SERVER_EXECUTE	( SEC_STD_READ_CONTROL|SERVER_ACCESS_ENUMERATE )
#define PRINTER_ALL_ACCESS	( SEC_STD_REQUIRED|PRINTER_ACCESS_ADMINISTER|PRINTER_ACCESS_USE )
#define PRINTER_READ	( SEC_STD_READ_CONTROL|PRINTER_ACCESS_USE )
#define PRINTER_WRITE	( STANDARD_RIGHTS_WRITE_ACCESS|PRINTER_ACCESS_USE )
#define PRINTER_EXECUTE	( SEC_STD_READ_CONTROL|PRINTER_ACCESS_USE )
#define JOB_ALL_ACCESS	( SEC_STD_REQUIRED|JOB_ACCESS_ADMINISTER )
#define JOB_READ	( SEC_STD_READ_CONTROL|JOB_ACCESS_ADMINISTER )
#define JOB_WRITE	( STANDARD_RIGHTS_WRITE_ACCESS|JOB_ACCESS_ADMINISTER )
#define JOB_EXECUTE	( SEC_STD_READ_CONTROL|JOB_ACCESS_ADMINISTER )
#define PRINTER_ACE_FULL_CONTROL	( SEC_GENERIC_ALL|PRINTER_ALL_ACCESS )
#define PRINTER_ACE_MANAGE_DOCUMENTS	( SEC_GENERIC_ALL|READ_CONTROL_ACCESS )
#define PRINTER_ACE_PRINT	( GENERIC_EXECUTE_ACCESS|READ_CONTROL_ACCESS|PRINTER_ACCESS_USE )
struct spoolss_Time {
	uint16_t year;
	uint16_t month;
	uint16_t day_of_week;
	uint16_t day;
	uint16_t hour;
	uint16_t minute;
	uint16_t second;
	uint16_t millisecond;
}/* [noprint,gensize] */;

struct spoolss_TimeCtr {
	uint32_t size;/* [value(ndr_size_spoolss_Time(time,ndr->flags))] */
	struct spoolss_Time *time;/* [unique] */
};

enum spoolss_ProcessorArchitecture
#ifndef USE_UINT_ENUMS
 {
	PROCESSOR_ARCHITECTURE_INTEL=(int)(0x0000),
	PROCESSOR_ARCHITECTURE_IA64=(int)(0x0006),
	PROCESSOR_ARCHITECTURE_AMD64=(int)(0x0009)
}
#else
 { __donnot_use_enum_spoolss_ProcessorArchitecture=0x7FFFFFFF}
#define PROCESSOR_ARCHITECTURE_INTEL ( 0x0000 )
#define PROCESSOR_ARCHITECTURE_IA64 ( 0x0006 )
#define PROCESSOR_ARCHITECTURE_AMD64 ( 0x0009 )
#endif
;

enum spoolss_ProcessorType
#ifndef USE_UINT_ENUMS
 {
	PROCESSOR_INTEL_386=(int)(0x00000182),
	PROCESSOR_INTEL_486=(int)(0x000001E6),
	PROCESSOR_INTEL_PENTIUM=(int)(0x0000024A),
	PROCESSOR_INTEL_IA64=(int)(0x00000898),
	PROCESSOR_AMD_X8664=(int)(0x000022A0)
}
#else
 { __donnot_use_enum_spoolss_ProcessorType=0x7FFFFFFF}
#define PROCESSOR_INTEL_386 ( 0x00000182 )
#define PROCESSOR_INTEL_486 ( 0x000001E6 )
#define PROCESSOR_INTEL_PENTIUM ( 0x0000024A )
#define PROCESSOR_INTEL_IA64 ( 0x00000898 )
#define PROCESSOR_AMD_X8664 ( 0x000022A0 )
#endif
;

enum spoolss_MajorVersion
#ifndef USE_UINT_ENUMS
 {
	SPOOLSS_MAJOR_VERSION_NT4_95_98_ME=(int)(0x00000004),
	SPOOLSS_MAJOR_VERSION_2000_2003_XP=(int)(0x00000005),
	SPOOLSS_MAJOR_VERSION_2008_VISTA=(int)(0x00000006)
}
#else
 { __donnot_use_enum_spoolss_MajorVersion=0x7FFFFFFF}
#define SPOOLSS_MAJOR_VERSION_NT4_95_98_ME ( 0x00000004 )
#define SPOOLSS_MAJOR_VERSION_2000_2003_XP ( 0x00000005 )
#define SPOOLSS_MAJOR_VERSION_2008_VISTA ( 0x00000006 )
#endif
;

enum spoolss_MinorVersion
#ifndef USE_UINT_ENUMS
 {
	SPOOLSS_MINOR_VERSION_0=(int)(0x00000000),
	SPOOLSS_MINOR_VERSION_XP=(int)(0x00000001),
	SPOOLSS_MINOR_VERSION_2003_XP64=(int)(0x00000002),
	SPOOLSS_MINOR_VERSION_98=(int)(0x0000000a),
	SPOOLSS_MINOR_VERSION_ME=(int)(0x0000005a)
}
#else
 { __donnot_use_enum_spoolss_MinorVersion=0x7FFFFFFF}
#define SPOOLSS_MINOR_VERSION_0 ( 0x00000000 )
#define SPOOLSS_MINOR_VERSION_XP ( 0x00000001 )
#define SPOOLSS_MINOR_VERSION_2003_XP64 ( 0x00000002 )
#define SPOOLSS_MINOR_VERSION_98 ( 0x0000000a )
#define SPOOLSS_MINOR_VERSION_ME ( 0x0000005a )
#endif
;

/* bitmap spoolss_PrinterStatus */
#define PRINTER_STATUS_PAUSED ( 0x00000001 )
#define PRINTER_STATUS_ERROR ( 0x00000002 )
#define PRINTER_STATUS_PENDING_DELETION ( 0x00000004 )
#define PRINTER_STATUS_PAPER_JAM ( 0x00000008 )
#define PRINTER_STATUS_PAPER_OUT ( 0x00000010 )
#define PRINTER_STATUS_MANUAL_FEED ( 0x00000020 )
#define PRINTER_STATUS_PAPER_PROBLEM ( 0x00000040 )
#define PRINTER_STATUS_OFFLINE ( 0x00000080 )
#define PRINTER_STATUS_IO_ACTIVE ( 0x00000100 )
#define PRINTER_STATUS_BUSY ( 0x00000200 )
#define PRINTER_STATUS_PRINTING ( 0x00000400 )
#define PRINTER_STATUS_OUTPUT_BIN_FULL ( 0x00000800 )
#define PRINTER_STATUS_NOT_AVAILABLE ( 0x00001000 )
#define PRINTER_STATUS_WAITING ( 0x00002000 )
#define PRINTER_STATUS_PROCESSING ( 0x00004000 )
#define PRINTER_STATUS_INITIALIZING ( 0x00008000 )
#define PRINTER_STATUS_WARMING_UP ( 0x00010000 )
#define PRINTER_STATUS_TONER_LOW ( 0x00020000 )
#define PRINTER_STATUS_NO_TONER ( 0x00040000 )
#define PRINTER_STATUS_PAGE_PUNT ( 0x00080000 )
#define PRINTER_STATUS_USER_INTERVENTION ( 0x00100000 )
#define PRINTER_STATUS_OUT_OF_MEMORY ( 0x00200000 )
#define PRINTER_STATUS_DOOR_OPEN ( 0x00400000 )
#define PRINTER_STATUS_SERVER_UNKNOWN ( 0x00800000 )
#define PRINTER_STATUS_POWER_SAVE ( 0x01000000 )

/* bitmap spoolss_JobStatus */
#define JOB_STATUS_PAUSED ( 0x00000001 )
#define JOB_STATUS_ERROR ( 0x00000002 )
#define JOB_STATUS_DELETING ( 0x00000004 )
#define JOB_STATUS_SPOOLING ( 0x00000008 )
#define JOB_STATUS_PRINTING ( 0x00000010 )
#define JOB_STATUS_OFFLINE ( 0x00000020 )
#define JOB_STATUS_PAPEROUT ( 0x00000040 )
#define JOB_STATUS_PRINTED ( 0x00000080 )
#define JOB_STATUS_DELETED ( 0x00000100 )
#define JOB_STATUS_BLOCKED_DEVQ ( 0x00000200 )
#define JOB_STATUS_USER_INTERVENTION ( 0x00000400 )
#define JOB_STATUS_RESTART ( 0x00000800 )
#define JOB_STATUS_COMPLETE ( 0x00001000 )

enum spoolss_Build
#ifndef USE_UINT_ENUMS
 {
	SPOOLSS_DEBUGGING_BUILD=(int)(0x00000000),
	SPOOLSS_RELEASE_BUILD=(int)(0x00000001)
}
#else
 { __donnot_use_enum_spoolss_Build=0x7FFFFFFF}
#define SPOOLSS_DEBUGGING_BUILD ( 0x00000000 )
#define SPOOLSS_RELEASE_BUILD ( 0x00000001 )
#endif
;

struct spoolss_PrinterInfo0 {
	const char * printername;/* [relative,flag(LIBNDR_FLAG_STR_NULLTERM|LIBNDR_FLAG_ALIGN2)] */
	const char * servername;/* [relative,flag(LIBNDR_FLAG_STR_NULLTERM|LIBNDR_FLAG_ALIGN2)] */
	uint32_t cjobs;
	uint32_t total_jobs;
	uint32_t total_bytes;
	struct spoolss_Time time;
	uint32_t global_counter;
	uint32_t total_pages;
	uint32_t version;
	enum spoolss_Build free_build;
	uint32_t spooling;
	uint32_t max_spooling;
	uint32_t session_counter;
	uint32_t num_error_out_of_paper;
	uint32_t num_error_not_ready;
	uint32_t job_error;
	uint32_t number_of_processors;
	enum spoolss_ProcessorType processor_type;
	uint32_t high_part_total_bytes;
	uint32_t change_id;
	WERROR last_error;
	uint32_t status;
	uint32_t enumerate_network_printers;
	uint32_t c_setprinter;
	enum spoolss_ProcessorArchitecture processor_architecture;
	uint16_t processor_level;
	uint32_t ref_ic;
	uint32_t reserved2;
	uint32_t reserved3;
}/* [gensize,public] */;

enum spoolss_DM_Signature
#ifndef USE_UINT_ENUMS
 {
	SPOOLSS_DM_SIGNATURE_UNIDRVEXTRA=(int)(0x554e4944),
	SPOOLSS_DM_SIGNATURE_JTEXP=(int)(0x4a544d53),
	SPOOLSS_DM_SIGNATURE_PSEXTRA=(int)(0x50524956)
}
#else
 { __donnot_use_enum_spoolss_DM_Signature=0x7FFFFFFF}
#define SPOOLSS_DM_SIGNATURE_UNIDRVEXTRA ( 0x554e4944 )
#define SPOOLSS_DM_SIGNATURE_JTEXP ( 0x4a544d53 )
#define SPOOLSS_DM_SIGNATURE_PSEXTRA ( 0x50524956 )
#endif
;

enum spoolss_DM_Layout
#ifndef USE_UINT_ENUMS
 {
	SPOOLSS_DM_LAYOUT_NUP_DISABLED=(int)(0x00000000),
	SPOOLSS_DM_LAYOUT_NUP_2=(int)(0x00000001),
	SPOOLSS_DM_LAYOUT_NUP_4=(int)(0x00000002),
	SPOOLSS_DM_LAYOUT_NUP_6=(int)(0x00000003),
	SPOOLSS_DM_LAYOUT_NUP_9=(int)(0x00000004),
	SPOOLSS_DM_LAYOUT_NUP_16=(int)(0x00000005),
	SPOOLSS_DM_LAYOUT_BOOKLET=(int)(0x00000006)
}
#else
 { __donnot_use_enum_spoolss_DM_Layout=0x7FFFFFFF}
#define SPOOLSS_DM_LAYOUT_NUP_DISABLED ( 0x00000000 )
#define SPOOLSS_DM_LAYOUT_NUP_2 ( 0x00000001 )
#define SPOOLSS_DM_LAYOUT_NUP_4 ( 0x00000002 )
#define SPOOLSS_DM_LAYOUT_NUP_6 ( 0x00000003 )
#define SPOOLSS_DM_LAYOUT_NUP_9 ( 0x00000004 )
#define SPOOLSS_DM_LAYOUT_NUP_16 ( 0x00000005 )
#define SPOOLSS_DM_LAYOUT_BOOKLET ( 0x00000006 )
#endif
;

enum spoolss_DM_NupDirection
#ifndef USE_UINT_ENUMS
 {
	SPOOLSS_DM_NUP_DIRECTION_L2R_T2B=(int)(0x00000001),
	SPOOLSS_DM_NUP_DIRECTION_T2B_L2R=(int)(0x00000002),
	SPOOLSS_DM_NUP_DIRECTION_R2L_T2B=(int)(0x00000004),
	SPOOLSS_DM_NUP_DIRECTION_T2B_R2L=(int)(0x00000008)
}
#else
 { __donnot_use_enum_spoolss_DM_NupDirection=0x7FFFFFFF}
#define SPOOLSS_DM_NUP_DIRECTION_L2R_T2B ( 0x00000001 )
#define SPOOLSS_DM_NUP_DIRECTION_T2B_L2R ( 0x00000002 )
#define SPOOLSS_DM_NUP_DIRECTION_R2L_T2B ( 0x00000004 )
#define SPOOLSS_DM_NUP_DIRECTION_T2B_R2L ( 0x00000008 )
#endif
;

enum spoolss_DM_NupBorderFlags
#ifndef USE_UINT_ENUMS
 {
	SPOOLSS_DM_NUP_BORDER_PRINT=(int)(0x00000000),
	SPOOLSS_DM_NUP_BORDER_NONE=(int)(0x00000001)
}
#else
 { __donnot_use_enum_spoolss_DM_NupBorderFlags=0x7FFFFFFF}
#define SPOOLSS_DM_NUP_BORDER_PRINT ( 0x00000000 )
#define SPOOLSS_DM_NUP_BORDER_NONE ( 0x00000001 )
#endif
;

enum spoolss_DM_BookletFlags
#ifndef USE_UINT_ENUMS
 {
	SPOOLSS_DM_BOOKLET_LEFT_FLIP=(int)(0x00000000),
	SPOOLSS_DM_BOOKLET_RIGHT_FLIP=(int)(0x00000001)
}
#else
 { __donnot_use_enum_spoolss_DM_BookletFlags=0x7FFFFFFF}
#define SPOOLSS_DM_BOOKLET_LEFT_FLIP ( 0x00000000 )
#define SPOOLSS_DM_BOOKLET_RIGHT_FLIP ( 0x00000001 )
#endif
;

/* bitmap spoolss_DMPS_Flags */
#define SPOOLSS_DM_PS_FLAGS_DRV_ERROR_HANDLER ( 0x00000002 )
#define SPOOLSS_DM_PS_FLAGS_PRINT_MIRROR ( 0x00000004 )
#define SPOOLSS_DM_PS_FLAGS_PRINT_NEGATIVE ( 0x00000010 )
#define SPOOLSS_DM_PS_FLAGS_COMPRESS_BITMAP ( 0x00000040 )
#define SPOOLSS_DM_PS_FLAGS_ROTATE_180 ( 0x00000200 )
#define SPOOLSS_DM_PS_FLAGS_GDI_METAFILE_SPOOL ( 0x00002000 )

struct spoolss_PSDRVEXTRA351 {
	enum spoolss_DM_Signature dwSignature;/* [value(SPOOLSS_DM_SIGNATURE_PSEXTRA)] */
	uint32_t dwFlags;
	uint32_t wchEPSFile[12];
	uint16_t caSize;/* [value(24)] */
	uint16_t caFlags;
	uint16_t caIlluminantIndex;
	uint16_t caRedGamma;
	uint16_t caGreenGamma;
	uint16_t caBlueGamma;
	uint16_t caReferenceBlack;
	uint16_t caReferenceWhite;
	uint16_t caContrast;
	uint16_t caBrightness;
	uint16_t caColorfulness;
	uint16_t caRedGreenTint;
};

struct spoolss_PSDRVEXTRA400 {
	enum spoolss_DM_Signature dwSignature;/* [value(SPOOLSS_DM_SIGNATURE_PSEXTRA)] */
	uint32_t dwFlags;
	uint32_t wchEPSFile[12];
	uint16_t caSize;/* [value(24)] */
	uint16_t caFlags;
	uint16_t caIlluminantIndex;
	uint16_t caRedGamma;
	uint16_t caGreenGamma;
	uint16_t caBlueGamma;
	uint16_t caReferenceBlack;
	uint16_t caReferenceWhite;
	uint16_t caContrast;
	uint16_t caBrightness;
	uint16_t caColorfulness;
	uint16_t caRedGreenTint;
	uint16_t wChecksum;
	uint16_t wOptions;
	uint32_t aubOptions[8];
};

enum spoolss_DMPS_Dialect
#ifndef USE_UINT_ENUMS
 {
	SPOOLSS_DM_PS_OPTIMIZE_SPEED=(int)(0x00000000),
	SPOOLSS_DM_PS_OPTIMIZE_PORTABILITY=(int)(0x00000001),
	SPOOLSS_DM_PS_OPTIMIZE_EPS=(int)(0x00000002),
	SPOOLSS_DM_PS_OPTIMIZE_ARCHIVAL=(int)(0x00000003)
}
#else
 { __donnot_use_enum_spoolss_DMPS_Dialect=0x7FFFFFFF}
#define SPOOLSS_DM_PS_OPTIMIZE_SPEED ( 0x00000000 )
#define SPOOLSS_DM_PS_OPTIMIZE_PORTABILITY ( 0x00000001 )
#define SPOOLSS_DM_PS_OPTIMIZE_EPS ( 0x00000002 )
#define SPOOLSS_DM_PS_OPTIMIZE_ARCHIVAL ( 0x00000003 )
#endif
;

enum spoolss_DMPS_TTDLFmt
#ifndef USE_UINT_ENUMS
 {
	SPOOLSS_DM_PS_TTDLFMT_DEFAULT=(int)(0x00000000),
	SPOOLSS_DM_PS_TTDLFMT_TYPE_1=(int)(0x00000001),
	SPOOLSS_DM_PS_TTDLFMT_TYPE_3=(int)(0x00000002),
	SPOOLSS_DM_PS_TTDLFMT_TYPE_42=(int)(0x00000003)
}
#else
 { __donnot_use_enum_spoolss_DMPS_TTDLFmt=0x7FFFFFFF}
#define SPOOLSS_DM_PS_TTDLFMT_DEFAULT ( 0x00000000 )
#define SPOOLSS_DM_PS_TTDLFMT_TYPE_1 ( 0x00000001 )
#define SPOOLSS_DM_PS_TTDLFMT_TYPE_3 ( 0x00000002 )
#define SPOOLSS_DM_PS_TTDLFMT_TYPE_42 ( 0x00000003 )
#endif
;

enum spoolss_DMPS_PSLevel
#ifndef USE_UINT_ENUMS
 {
	SPOOLSS_DM_PS_PSLEVEL_1=(int)(0x00000001),
	SPOOLSS_DM_PS_PSLEVEL_2=(int)(0x00000002),
	SPOOLSS_DM_PS_PSLEVEL_3=(int)(0x00000003)
}
#else
 { __donnot_use_enum_spoolss_DMPS_PSLevel=0x7FFFFFFF}
#define SPOOLSS_DM_PS_PSLEVEL_1 ( 0x00000001 )
#define SPOOLSS_DM_PS_PSLEVEL_2 ( 0x00000002 )
#define SPOOLSS_DM_PS_PSLEVEL_3 ( 0x00000003 )
#endif
;

enum spoolss_DMPS_FeedDirection
#ifndef USE_UINT_ENUMS
 {
	SPOOLSS_DM_PS_FEED_DIRECTION_LONG_EDGE_FIRST=(int)(0x0000),
	SPOOLSS_DM_PS_FEED_DIRECTION_SHORT_EDGE_FIRST=(int)(0x0001),
	SPOOLSS_DM_PS_FEED_DIRECTION_LONG_EDGE_FIRST_UPSIDEDOWN=(int)(0x0002),
	SPOOLSS_DM_PS_FEED_DIRECTION_SHORT_EDGE_FIRST_UPSIDEDOWN=(int)(0x0003)
}
#else
 { __donnot_use_enum_spoolss_DMPS_FeedDirection=0x7FFFFFFF}
#define SPOOLSS_DM_PS_FEED_DIRECTION_LONG_EDGE_FIRST ( 0x0000 )
#define SPOOLSS_DM_PS_FEED_DIRECTION_SHORT_EDGE_FIRST ( 0x0001 )
#define SPOOLSS_DM_PS_FEED_DIRECTION_LONG_EDGE_FIRST_UPSIDEDOWN ( 0x0002 )
#define SPOOLSS_DM_PS_FEED_DIRECTION_SHORT_EDGE_FIRST_UPSIDEDOWN ( 0x0003 )
#endif
;

struct spoolss_PSDRVEXTRA500 {
	enum spoolss_DM_Signature dwSignature;/* [value(SPOOLSS_DM_SIGNATURE_PSEXTRA)] */
	uint32_t dwFlags;
	uint32_t wchEPSFile[12];
	uint16_t caSize;/* [value(24)] */
	uint16_t caFlags;
	uint16_t caIlluminantIndex;
	uint16_t caRedGamma;
	uint16_t caGreenGamma;
	uint16_t caBlueGamma;
	uint16_t caReferenceBlack;
	uint16_t caReferenceWhite;
	uint16_t caContrast;
	uint16_t caBrightness;
	uint16_t caColorfulness;
	uint16_t caRedGreenTint;
	uint16_t wReserved1;
	uint16_t wSize;
	uint32_t fxScrFreq;
	uint32_t fxScrAngle;
	enum spoolss_DMPS_Dialect iDialect;
	enum spoolss_DMPS_TTDLFmt iTTDLFmt;
	uint32_t bReversePrint;
	enum spoolss_DM_Layout iLayout;
	enum spoolss_DMPS_PSLevel iPSLevel;
	uint32_t dwReserved2;
	uint16_t wOEMExtra;
	uint16_t wVer;/* [value(0x0010)] */
	uint32_t dwX;
	uint32_t dwY;
	uint32_t dwWidthOffset;
	uint32_t dwHeightOffset;
	enum spoolss_DMPS_FeedDirection wFeedDirection;
	uint16_t wCutSheet;
	uint32_t dwReserved3[4];
	uint32_t dwChecksum32;
	uint32_t dwOptions;
	uint32_t aOptions[128];
};

struct spoolss_PSDRVEXTRA {
	enum spoolss_DM_Signature dwSignature;/* [value(SPOOLSS_DM_SIGNATURE_PSEXTRA)] */
	uint32_t dwFlags;
	uint32_t wchEPSFile[12];
	uint16_t caSize;/* [value(24)] */
	uint16_t caFlags;
	uint16_t caIlluminantIndex;
	uint16_t caRedGamma;
	uint16_t caGreenGamma;
	uint16_t caBlueGamma;
	uint16_t caReferenceBlack;
	uint16_t caReferenceWhite;
	uint16_t caContrast;
	uint16_t caBrightness;
	uint16_t caColorfulness;
	uint16_t caRedGreenTint;
	uint16_t wCoreJTExpSize;
	uint16_t wCoreFullSize;/* [value(ndr_size_spoolss_PSDRVEXTRA(r,ndr->flags)+wCoreJTExpSize)] */
	uint32_t fxScrFreq;
	uint32_t fxScrAngle;
	enum spoolss_DMPS_Dialect iDialect;
	enum spoolss_DMPS_TTDLFmt iTTDLFmt;
	uint32_t bReversePrint;
	enum spoolss_DM_Layout iLayout;
	enum spoolss_DMPS_PSLevel iPSLevel;
	uint32_t dwReserved2;
	uint16_t wOEMExtra;
	uint16_t wVer;/* [value(0x0010)] */
	uint32_t dwX;
	uint32_t dwY;
	uint32_t dwWidthOffset;
	uint32_t dwHeightOffset;
	enum spoolss_DMPS_FeedDirection wFeedDirection;
	uint16_t wCutSheet;
	uint32_t dwReserved3[4];
	uint32_t dwChecksum32;
	uint32_t dwOptions;
	uint32_t aOptions[128];
	enum spoolss_DM_NupDirection dwNupDirection;
	enum spoolss_DM_NupBorderFlags dwNupBorderFlags;
	enum spoolss_DM_BookletFlags dwBookletFlags;
	uint32_t dwPadding;
};

struct spoolss_UNIDRVEXTRA3_4 {
	uint16_t wReserved[56];
};

enum spoolss_DMUNI_Quality
#ifndef USE_UINT_ENUMS
 {
	SPOOLSS_DM_UNI_QUALITY_BEST=(int)(0x00000000),
	SPOOLSS_DM_UNI_QUALITY_MEDIUM=(int)(0x00000001),
	SPOOLSS_DM_UNI_QUALITY_DRAFT=(int)(0x00000002)
}
#else
 { __donnot_use_enum_spoolss_DMUNI_Quality=0x7FFFFFFF}
#define SPOOLSS_DM_UNI_QUALITY_BEST ( 0x00000000 )
#define SPOOLSS_DM_UNI_QUALITY_MEDIUM ( 0x00000001 )
#define SPOOLSS_DM_UNI_QUALITY_DRAFT ( 0x00000002 )
#endif
;

/* bitmap spoolss_DMUNI_Flags */
#define SPOOLSS_DM_UNI_FLAGS_PRINT_TEXT_AS_GRAPHICS ( 0x00000002 )
#define SPOOLSS_DM_UNI_FLAGS_AVOID_EMFSPOOL ( 0x00000010 )
#define SPOOLSS_DM_UNI_FLAGS_CUSTOM_HALFTONING ( 0x00000080 )

struct spoolss_UNIDRVEXTRA500 {
	enum spoolss_DM_Signature dwSignature;/* [value(SPOOLSS_DM_SIGNATURE_UNIDRVEXTRA)] */
	uint16_t wVer;/* [value(0x0022)] */
	uint16_t sPadding;
	uint16_t wSize;
	uint16_t wOEMExtra;
	uint32_t dwChecksum32;
	uint32_t dwFlags;
	uint32_t bReversePrint;
	enum spoolss_DM_Layout iLayout;
	enum spoolss_DMUNI_Quality iQuality;
	uint16_t wReserved[6];
	uint32_t dwOptions;
	uint32_t aOptions[128];
};

struct spoolss_UNIDRVEXTRA {
	enum spoolss_DM_Signature dwSignature;/* [value(SPOOLSS_DM_SIGNATURE_UNIDRVEXTRA)] */
	uint16_t wVer;/* [value(0x0022)] */
	uint16_t wCoreJTExpSize;
	uint16_t wCoreFullSize;/* [value(ndr_size_spoolss_UNIDRVEXTRA(r,ndr->flags)+wCoreJTExpSize)] */
	uint16_t wOEMExtra;
	uint32_t dwChecksum32;
	uint32_t dwFlags;
	uint32_t bReversePrint;
	enum spoolss_DM_Layout iLayout;
	enum spoolss_DMUNI_Quality iQuality;
	uint16_t wReserved[6];
	uint32_t dwOptions;
	uint32_t aOptions[128];
	enum spoolss_DM_NupDirection dwNupDirection;
	enum spoolss_DM_NupBorderFlags dwNupBorderFlags;
	enum spoolss_DM_BookletFlags dwBookletFlags;
}/* [public,gensize] */;

struct spoolss_JTEXP {
	uint32_t dwSize;
	enum spoolss_DM_Signature dwSignature;/* [value(SPOOLSS_DM_SIGNATURE_JTEXP)] */
	uint32_t dwVersion;/* [value(0)] */
	uint32_t wJTHdrSize;/* [value(16)] */
	uint32_t wCoreMFOSize;
	const char *ModelName;/* [charset(UTF16),unique] */
	const char ** FeatureOptionPairs;/* [flag(LIBNDR_FLAG_STR_NULLTERM|LIBNDR_FLAG_ALIGN2)] */
};

struct spoolss_OEM_DMEXTRA {
	uint32_t dwSize;
	enum spoolss_DM_Signature dwSignature;
	uint32_t dwVersion;
	DATA_BLOB Data;/* [flag(LIBNDR_FLAG_REMAINING)] */
};

union spoolss_DeviceModeExtraDataPostScript {
	struct spoolss_PSDRVEXTRA351 psdrvextra351;/* [case(0x0350)] */
	struct spoolss_PSDRVEXTRA400 psdrvextra400;/* [case(0x0400)] */
	struct spoolss_PSDRVEXTRA500 psdrvextra500;/* [case(0x0501)] */
	struct spoolss_PSDRVEXTRA psdrvextra;/* [case(0x0600)] */
	DATA_BLOB psblob;/* [flag(LIBNDR_FLAG_REMAINING),default] */
}/* [nodiscriminant] */;

union spoolss_DeviceModeExtraDataUniDriver {
	struct spoolss_UNIDRVEXTRA3_4 unidrvextra3_4;/* [case(0x0301)] */
	struct spoolss_UNIDRVEXTRA500 unidrvextra500;/* [case(0x0500)] */
	struct spoolss_UNIDRVEXTRA unidrvextra;/* [case(0x0600)] */
	DATA_BLOB uniblob;/* [default,flag(LIBNDR_FLAG_REMAINING)] */
}/* [nodiscriminant] */;

/* bitmap spoolss_DeviceModeFields */
#define DEVMODE_ORIENTATION ( 0x00000001 )
#define DEVMODE_PAPERSIZE ( 0x00000002 )
#define DEVMODE_PAPERLENGTH ( 0x00000004 )
#define DEVMODE_PAPERWIDTH ( 0x00000008 )
#define DEVMODE_SCALE ( 0x00000010 )
#define DEVMODE_POSITION ( 0x00000020 )
#define DEVMODE_NUP ( 0x00000040 )
#define DEVMODE_COPIES ( 0x00000100 )
#define DEVMODE_DEFAULTSOURCE ( 0x00000200 )
#define DEVMODE_PRINTQUALITY ( 0x00000400 )
#define DEVMODE_COLOR ( 0x00000800 )
#define DEVMODE_DUPLEX ( 0x00001000 )
#define DEVMODE_YRESOLUTION ( 0x00002000 )
#define DEVMODE_TTOPTION ( 0x00004000 )
#define DEVMODE_COLLATE ( 0x00008000 )
#define DEVMODE_FORMNAME ( 0x00010000 )
#define DEVMODE_LOGPIXELS ( 0x00020000 )
#define DEVMODE_BITSPERPEL ( 0x00040000 )
#define DEVMODE_PELSWIDTH ( 0x00080000 )
#define DEVMODE_PELSHEIGHT ( 0x00100000 )
#define DEVMODE_DISPLAYFLAGS ( 0x00200000 )
#define DEVMODE_DISPLAYFREQUENCY ( 0x00400000 )
#define DEVMODE_ICMMETHOD ( 0x00800000 )
#define DEVMODE_ICMINTENT ( 0x01000000 )
#define DEVMODE_MEDIATYPE ( 0x02000000 )
#define DEVMODE_DITHERTYPE ( 0x04000000 )
#define DEVMODE_PANNINGWIDTH ( 0x08000000 )
#define DEVMODE_PANNINGHEIGHT ( 0x10000000 )

enum spoolss_DeviceModeSpecVersion
#ifndef USE_UINT_ENUMS
 {
	DMSPEC_NT3=(int)(0x320),
	DMSPEC_WIN95_98_ME=(int)(0x400),
	DMSPEC_NT4_AND_ABOVE=(int)(0x401)
}
#else
 { __donnot_use_enum_spoolss_DeviceModeSpecVersion=0x7FFFFFFF}
#define DMSPEC_NT3 ( 0x320 )
#define DMSPEC_WIN95_98_ME ( 0x400 )
#define DMSPEC_NT4_AND_ABOVE ( 0x401 )
#endif
;

enum spoolss_DeviceModeOrientation
#ifndef USE_UINT_ENUMS
 {
	DMORIENT_PORTRAIT=(int)(0x0001),
	DMORIENT_LANDSCAPE=(int)(0x0002)
}
#else
 { __donnot_use_enum_spoolss_DeviceModeOrientation=0x7FFFFFFF}
#define DMORIENT_PORTRAIT ( 0x0001 )
#define DMORIENT_LANDSCAPE ( 0x0002 )
#endif
;

enum spoolss_DeviceModePaperSize
#ifndef USE_UINT_ENUMS
 {
	DMPAPER_LETTER=(int)(0x0001),
	DMPAPER_LETTERSMALL=(int)(0x0002),
	DMPAPER_TABLOID=(int)(0x0003),
	DMPAPER_LEDGER=(int)(0x0004),
	DMPAPER_LEGAL=(int)(0x0005),
	DMPAPER_STATEMENT=(int)(0x0006),
	DMPAPER_EXECUTIVE=(int)(0x0007),
	DMPAPER_A3=(int)(0x0008),
	DMPAPER_A4=(int)(0x0009),
	DMPAPER_A4SMALL=(int)(0x000A),
	DMPAPER_A5=(int)(0x000B),
	DMPAPER_B4=(int)(0x000C),
	DMPAPER_B5=(int)(0x000D),
	DMPAPER_FOLIO=(int)(0x000E),
	DMPAPER_QUARTO=(int)(0x000F),
	DMPAPER_10X14=(int)(0x0010),
	DMPAPER_11X17=(int)(0x0011),
	DMPAPER_NOTE=(int)(0x0012),
	DMPAPER_ENV_9=(int)(0x0013),
	DMPAPER_ENV_10=(int)(0x0014),
	DMPAPER_ENV_11=(int)(0x0015),
	DMPAPER_ENV_12=(int)(0x0016),
	DMPAPER_ENV_14=(int)(0x0017),
	DMPAPER_CSHEET=(int)(0x0018),
	DMPAPER_DSHEET=(int)(0x0019),
	DMPAPER_ESHEET=(int)(0x001A),
	DMPAPER_ENV_DL=(int)(0x001B),
	DMPAPER_ENV_C5=(int)(0x001C),
	DMPAPER_ENV_C3=(int)(0x001D),
	DMPAPER_ENV_C4=(int)(0x001E),
	DMPAPER_ENV_C6=(int)(0x001F),
	DMPAPER_ENV_C65=(int)(0x0020),
	DMPAPER_ENV_B4=(int)(0x0021),
	DMPAPER_ENV_B5=(int)(0x0022),
	DMPAPER_ENV_B6=(int)(0x0023),
	DMPAPER_ENV_ITALY=(int)(0x0024),
	DMPAPER_ENV_MONARCH=(int)(0x0025),
	DMPAPER_ENV_PERSONAL=(int)(0x0026),
	DMPAPER_FANFOLD_US=(int)(0x0027),
	DMPAPER_FANFOLD_STD_GERMAN=(int)(0x0028),
	DMPAPER_FANFOLD_LGL_GERMAN=(int)(0x0029),
	DMPAPER_DBL_JAPANESE_POSTCARD=(int)(0x0045),
	DMPAPER_A6=(int)(0x0046),
	DMPAPER_JENV_KAKU2=(int)(0x0047),
	DMPAPER_JENV_KAKU3=(int)(0x0048),
	DMPAPER_JENV_CHOU3=(int)(0x0049),
	DMPAPER_JENV_CHOU4=(int)(0x004A),
	DMPAPER_LETTER_ROTATED=(int)(0x004B),
	DMPAPER_A3_ROTATED=(int)(0x004C),
	DMPAPER_A4_ROTATED=(int)(0x004D),
	DMPAPER_A5_ROTATED=(int)(0x004E),
	DMPAPER_B4_JIS_ROTATED=(int)(0x004F),
	DMPAPER_B5_JIS_ROTATED=(int)(0x0050),
	DMPAPER_JAPANESE_POSTCARD_ROTATED=(int)(0x0051),
	DMPAPER_DBL_JAPANESE_POSTCARD_ROTATED=(int)(0x0052),
	DMPAPER_A6_ROTATED=(int)(0x0053),
	DMPAPER_JENV_KAKU2_ROTATED=(int)(0x0054),
	DMPAPER_JENV_KAKU3_ROTATED=(int)(0x0055),
	DMPAPER_JENV_CHOU3_ROTATED=(int)(0x0056),
	DMPAPER_JENV_CHOU4_ROTATED=(int)(0x0057),
	DMPAPER_B6_JIS=(int)(0x0058),
	DMPAPER_B6_JIS_ROTATED=(int)(0x0059),
	DMPAPER_12X11=(int)(0x005A),
	DMPAPER_JENV_YOU4=(int)(0x005B),
	DMPAPER_JENV_YOU4_ROTATED=(int)(0x005C),
	DMPAPER_P16K=(int)(0x005D),
	DMPAPER_P32K=(int)(0x005E),
	DMPAPER_P32KBIG=(int)(0x005F),
	DMPAPER_PENV_1=(int)(0x0060),
	DMPAPER_PENV_2=(int)(0x0061),
	DMPAPER_PENV_3=(int)(0x0062),
	DMPAPER_PENV_4=(int)(0x0063),
	DMPAPER_PENV_5=(int)(0x0064),
	DMPAPER_PENV_6=(int)(0x0065),
	DMPAPER_PENV_7=(int)(0x0066),
	DMPAPER_PENV_8=(int)(0x0067),
	DMPAPER_PENV_9=(int)(0x0068),
	DMPAPER_PENV_10=(int)(0x0069),
	DMPAPER_P16K_ROTATED=(int)(0x006A),
	DMPAPER_P32K_ROTATED=(int)(0x006B),
	DMPAPER_P32KBIG_ROTATED=(int)(0x006C),
	DMPAPER_PENV_1_ROTATED=(int)(0x006D),
	DMPAPER_PENV_2_ROTATED=(int)(0x006E),
	DMPAPER_PENV_3_ROTATED=(int)(0x006F),
	DMPAPER_PENV_4_ROTATED=(int)(0x0070),
	DMPAPER_PENV_5_ROTATED=(int)(0x0071),
	DMPAPER_PENV_6_ROTATED=(int)(0x0072),
	DMPAPER_PENV_7_ROTATED=(int)(0x0073),
	DMPAPER_PENV_8_ROTATED=(int)(0x0074),
	DMPAPER_PENV_9_ROTATED=(int)(0x0075),
	DMPAPER_PENV_10_ROTATED=(int)(0x0076)
}
#else
 { __donnot_use_enum_spoolss_DeviceModePaperSize=0x7FFFFFFF}
#define DMPAPER_LETTER ( 0x0001 )
#define DMPAPER_LETTERSMALL ( 0x0002 )
#define DMPAPER_TABLOID ( 0x0003 )
#define DMPAPER_LEDGER ( 0x0004 )
#define DMPAPER_LEGAL ( 0x0005 )
#define DMPAPER_STATEMENT ( 0x0006 )
#define DMPAPER_EXECUTIVE ( 0x0007 )
#define DMPAPER_A3 ( 0x0008 )
#define DMPAPER_A4 ( 0x0009 )
#define DMPAPER_A4SMALL ( 0x000A )
#define DMPAPER_A5 ( 0x000B )
#define DMPAPER_B4 ( 0x000C )
#define DMPAPER_B5 ( 0x000D )
#define DMPAPER_FOLIO ( 0x000E )
#define DMPAPER_QUARTO ( 0x000F )
#define DMPAPER_10X14 ( 0x0010 )
#define DMPAPER_11X17 ( 0x0011 )
#define DMPAPER_NOTE ( 0x0012 )
#define DMPAPER_ENV_9 ( 0x0013 )
#define DMPAPER_ENV_10 ( 0x0014 )
#define DMPAPER_ENV_11 ( 0x0015 )
#define DMPAPER_ENV_12 ( 0x0016 )
#define DMPAPER_ENV_14 ( 0x0017 )
#define DMPAPER_CSHEET ( 0x0018 )
#define DMPAPER_DSHEET ( 0x0019 )
#define DMPAPER_ESHEET ( 0x001A )
#define DMPAPER_ENV_DL ( 0x001B )
#define DMPAPER_ENV_C5 ( 0x001C )
#define DMPAPER_ENV_C3 ( 0x001D )
#define DMPAPER_ENV_C4 ( 0x001E )
#define DMPAPER_ENV_C6 ( 0x001F )
#define DMPAPER_ENV_C65 ( 0x0020 )
#define DMPAPER_ENV_B4 ( 0x0021 )
#define DMPAPER_ENV_B5 ( 0x0022 )
#define DMPAPER_ENV_B6 ( 0x0023 )
#define DMPAPER_ENV_ITALY ( 0x0024 )
#define DMPAPER_ENV_MONARCH ( 0x0025 )
#define DMPAPER_ENV_PERSONAL ( 0x0026 )
#define DMPAPER_FANFOLD_US ( 0x0027 )
#define DMPAPER_FANFOLD_STD_GERMAN ( 0x0028 )
#define DMPAPER_FANFOLD_LGL_GERMAN ( 0x0029 )
#define DMPAPER_DBL_JAPANESE_POSTCARD ( 0x0045 )
#define DMPAPER_A6 ( 0x0046 )
#define DMPAPER_JENV_KAKU2 ( 0x0047 )
#define DMPAPER_JENV_KAKU3 ( 0x0048 )
#define DMPAPER_JENV_CHOU3 ( 0x0049 )
#define DMPAPER_JENV_CHOU4 ( 0x004A )
#define DMPAPER_LETTER_ROTATED ( 0x004B )
#define DMPAPER_A3_ROTATED ( 0x004C )
#define DMPAPER_A4_ROTATED ( 0x004D )
#define DMPAPER_A5_ROTATED ( 0x004E )
#define DMPAPER_B4_JIS_ROTATED ( 0x004F )
#define DMPAPER_B5_JIS_ROTATED ( 0x0050 )
#define DMPAPER_JAPANESE_POSTCARD_ROTATED ( 0x0051 )
#define DMPAPER_DBL_JAPANESE_POSTCARD_ROTATED ( 0x0052 )
#define DMPAPER_A6_ROTATED ( 0x0053 )
#define DMPAPER_JENV_KAKU2_ROTATED ( 0x0054 )
#define DMPAPER_JENV_KAKU3_ROTATED ( 0x0055 )
#define DMPAPER_JENV_CHOU3_ROTATED ( 0x0056 )
#define DMPAPER_JENV_CHOU4_ROTATED ( 0x0057 )
#define DMPAPER_B6_JIS ( 0x0058 )
#define DMPAPER_B6_JIS_ROTATED ( 0x0059 )
#define DMPAPER_12X11 ( 0x005A )
#define DMPAPER_JENV_YOU4 ( 0x005B )
#define DMPAPER_JENV_YOU4_ROTATED ( 0x005C )
#define DMPAPER_P16K ( 0x005D )
#define DMPAPER_P32K ( 0x005E )
#define DMPAPER_P32KBIG ( 0x005F )
#define DMPAPER_PENV_1 ( 0x0060 )
#define DMPAPER_PENV_2 ( 0x0061 )
#define DMPAPER_PENV_3 ( 0x0062 )
#define DMPAPER_PENV_4 ( 0x0063 )
#define DMPAPER_PENV_5 ( 0x0064 )
#define DMPAPER_PENV_6 ( 0x0065 )
#define DMPAPER_PENV_7 ( 0x0066 )
#define DMPAPER_PENV_8 ( 0x0067 )
#define DMPAPER_PENV_9 ( 0x0068 )
#define DMPAPER_PENV_10 ( 0x0069 )
#define DMPAPER_P16K_ROTATED ( 0x006A )
#define DMPAPER_P32K_ROTATED ( 0x006B )
#define DMPAPER_P32KBIG_ROTATED ( 0x006C )
#define DMPAPER_PENV_1_ROTATED ( 0x006D )
#define DMPAPER_PENV_2_ROTATED ( 0x006E )
#define DMPAPER_PENV_3_ROTATED ( 0x006F )
#define DMPAPER_PENV_4_ROTATED ( 0x0070 )
#define DMPAPER_PENV_5_ROTATED ( 0x0071 )
#define DMPAPER_PENV_6_ROTATED ( 0x0072 )
#define DMPAPER_PENV_7_ROTATED ( 0x0073 )
#define DMPAPER_PENV_8_ROTATED ( 0x0074 )
#define DMPAPER_PENV_9_ROTATED ( 0x0075 )
#define DMPAPER_PENV_10_ROTATED ( 0x0076 )
#endif
;

enum spoolss_DeviceModeDefaultSource
#ifndef USE_UINT_ENUMS
 {
	DMBIN_UPPER=(int)(0x0001),
	DMBIN_LOWER=(int)(0x0002),
	DMBIN_MIDDLE=(int)(0x0003),
	DMBIN_MANUAL=(int)(0x0004),
	DMBIN_ENVELOPE=(int)(0x0005),
	DMBIN_ENVMANUAL=(int)(0x0006),
	DMBIN_AUTO=(int)(0x0007),
	DMBIN_TRACTOR=(int)(0x0008),
	DMBIN_SMALLFMT=(int)(0x0009),
	DMBIN_LARGEFMT=(int)(0x000a),
	DMBIN_LARGECAPACITY=(int)(0x000b),
	DMBIN_CASSETTE=(int)(0x000e),
	DMBIN_FORMSOURCE=(int)(0x000f)
}
#else
 { __donnot_use_enum_spoolss_DeviceModeDefaultSource=0x7FFFFFFF}
#define DMBIN_UPPER ( 0x0001 )
#define DMBIN_LOWER ( 0x0002 )
#define DMBIN_MIDDLE ( 0x0003 )
#define DMBIN_MANUAL ( 0x0004 )
#define DMBIN_ENVELOPE ( 0x0005 )
#define DMBIN_ENVMANUAL ( 0x0006 )
#define DMBIN_AUTO ( 0x0007 )
#define DMBIN_TRACTOR ( 0x0008 )
#define DMBIN_SMALLFMT ( 0x0009 )
#define DMBIN_LARGEFMT ( 0x000a )
#define DMBIN_LARGECAPACITY ( 0x000b )
#define DMBIN_CASSETTE ( 0x000e )
#define DMBIN_FORMSOURCE ( 0x000f )
#endif
;

enum spoolss_DeviceModePrintQuality
#ifndef USE_UINT_ENUMS
 {
	DMRES_HIGH=(int)(0xfffc),
	DMRES_MEDIUM=(int)(0xfffd),
	DMRES_LOW=(int)(0xfffe),
	DMRES_DRAFT=(int)(0xffff)
}
#else
 { __donnot_use_enum_spoolss_DeviceModePrintQuality=0x7FFFFFFF}
#define DMRES_HIGH ( 0xfffc )
#define DMRES_MEDIUM ( 0xfffd )
#define DMRES_LOW ( 0xfffe )
#define DMRES_DRAFT ( 0xffff )
#endif
;

enum spoolss_DeviceModeColor
#ifndef USE_UINT_ENUMS
 {
	DMRES_MONOCHROME=(int)(0x0001),
	DMRES_COLOR=(int)(0x0002)
}
#else
 { __donnot_use_enum_spoolss_DeviceModeColor=0x7FFFFFFF}
#define DMRES_MONOCHROME ( 0x0001 )
#define DMRES_COLOR ( 0x0002 )
#endif
;

enum spoolss_DeviceModeDuplex
#ifndef USE_UINT_ENUMS
 {
	DMDUP_SIMPLEX=(int)(0x0001),
	DMDUP_VERTICAL=(int)(0x0002),
	DMDUP_HORIZONTAL=(int)(0x0003)
}
#else
 { __donnot_use_enum_spoolss_DeviceModeDuplex=0x7FFFFFFF}
#define DMDUP_SIMPLEX ( 0x0001 )
#define DMDUP_VERTICAL ( 0x0002 )
#define DMDUP_HORIZONTAL ( 0x0003 )
#endif
;

enum spoolss_DeviceModeTTOption
#ifndef USE_UINT_ENUMS
 {
	DMTT_BITMAP=(int)(0x0001),
	DMTT_DOWNLOAD=(int)(0x0002),
	DMTT_SUBDEV=(int)(0x0003),
	DMTT_DOWNLOAD_OUTLINE=(int)(0x0004)
}
#else
 { __donnot_use_enum_spoolss_DeviceModeTTOption=0x7FFFFFFF}
#define DMTT_BITMAP ( 0x0001 )
#define DMTT_DOWNLOAD ( 0x0002 )
#define DMTT_SUBDEV ( 0x0003 )
#define DMTT_DOWNLOAD_OUTLINE ( 0x0004 )
#endif
;

enum spoolss_DeviceModeCollate
#ifndef USE_UINT_ENUMS
 {
	DMCOLLATE_FALSE=(int)(0x0000),
	DMCOLLATE_TRUE=(int)(0x0001)
}
#else
 { __donnot_use_enum_spoolss_DeviceModeCollate=0x7FFFFFFF}
#define DMCOLLATE_FALSE ( 0x0000 )
#define DMCOLLATE_TRUE ( 0x0001 )
#endif
;

enum spoolss_DeviceModeNUp
#ifndef USE_UINT_ENUMS
 {
	DMNUP_SYSTEM=(int)(0x00000001),
	DMNUP_ONEUP=(int)(0x00000002)
}
#else
 { __donnot_use_enum_spoolss_DeviceModeNUp=0x7FFFFFFF}
#define DMNUP_SYSTEM ( 0x00000001 )
#define DMNUP_ONEUP ( 0x00000002 )
#endif
;

enum spoolss_DeviceModeICMMethod
#ifndef USE_UINT_ENUMS
 {
	DMICMMETHOD_NONE=(int)(0x00000001),
	DMICMMETHOD_SYSTEM=(int)(0x00000002),
	DMICMMETHOD_DRIVER=(int)(0x00000003),
	DMICMMETHOD_DEVICE=(int)(0x00000004)
}
#else
 { __donnot_use_enum_spoolss_DeviceModeICMMethod=0x7FFFFFFF}
#define DMICMMETHOD_NONE ( 0x00000001 )
#define DMICMMETHOD_SYSTEM ( 0x00000002 )
#define DMICMMETHOD_DRIVER ( 0x00000003 )
#define DMICMMETHOD_DEVICE ( 0x00000004 )
#endif
;

enum spoolss_DeviceModeICMIntent
#ifndef USE_UINT_ENUMS
 {
	DMICM_SATURATE=(int)(0x00000001),
	DMICM_CONTRAST=(int)(0x00000002),
	DMICM_COLORIMETRIC=(int)(0x00000003),
	DMICM_ABS_COLORIMETRIC=(int)(0x00000004)
}
#else
 { __donnot_use_enum_spoolss_DeviceModeICMIntent=0x7FFFFFFF}
#define DMICM_SATURATE ( 0x00000001 )
#define DMICM_CONTRAST ( 0x00000002 )
#define DMICM_COLORIMETRIC ( 0x00000003 )
#define DMICM_ABS_COLORIMETRIC ( 0x00000004 )
#endif
;

enum spoolss_DeviceModeMediaType
#ifndef USE_UINT_ENUMS
 {
	DMMEDIA_STANDARD=(int)(0x00000001),
	DMMEDIA_TRANSPARENCY=(int)(0x00000002),
	DMMEDIA_GLOSSY=(int)(0x00000003)
}
#else
 { __donnot_use_enum_spoolss_DeviceModeMediaType=0x7FFFFFFF}
#define DMMEDIA_STANDARD ( 0x00000001 )
#define DMMEDIA_TRANSPARENCY ( 0x00000002 )
#define DMMEDIA_GLOSSY ( 0x00000003 )
#endif
;

enum spoolss_DeviceModeDitherType
#ifndef USE_UINT_ENUMS
 {
	DMDITHER_NONE=(int)(0x00000001),
	DMDITHER_COARSE=(int)(0x00000002),
	DMDITHER_FINE=(int)(0x00000003),
	DMDITHER_LINEART=(int)(0x00000004),
	DMDITHER_ERRORDIFFUSION=(int)(0x00000005),
	DMDITHER_RESERVED6=(int)(0x00000006),
	DMDITHER_RESERVED7=(int)(0x00000007),
	DMDITHER_RESERVED8=(int)(0x00000008),
	DMDITHER_RESERVED9=(int)(0x00000009),
	DMDITHER_GRAYSCALE=(int)(0x0000000A)
}
#else
 { __donnot_use_enum_spoolss_DeviceModeDitherType=0x7FFFFFFF}
#define DMDITHER_NONE ( 0x00000001 )
#define DMDITHER_COARSE ( 0x00000002 )
#define DMDITHER_FINE ( 0x00000003 )
#define DMDITHER_LINEART ( 0x00000004 )
#define DMDITHER_ERRORDIFFUSION ( 0x00000005 )
#define DMDITHER_RESERVED6 ( 0x00000006 )
#define DMDITHER_RESERVED7 ( 0x00000007 )
#define DMDITHER_RESERVED8 ( 0x00000008 )
#define DMDITHER_RESERVED9 ( 0x00000009 )
#define DMDITHER_GRAYSCALE ( 0x0000000A )
#endif
;

struct spoolss_DeviceMode {
	const char *devicename;/* [to_null,charset(UTF16)] */
	enum spoolss_DeviceModeSpecVersion specversion;
	uint16_t driverversion;
	uint16_t size;
	uint16_t __driverextra_length;/* [value(r->driverextra_data.length)] */
	uint32_t fields;
	enum spoolss_DeviceModeOrientation orientation;
	enum spoolss_DeviceModePaperSize papersize;
	uint16_t paperlength;
	uint16_t paperwidth;
	uint16_t scale;
	uint16_t copies;
	enum spoolss_DeviceModeDefaultSource defaultsource;
	enum spoolss_DeviceModePrintQuality printquality;
	enum spoolss_DeviceModeColor color;
	enum spoolss_DeviceModeDuplex duplex;
	uint16_t yresolution;
	enum spoolss_DeviceModeTTOption ttoption;
	enum spoolss_DeviceModeCollate collate;
	const char *formname;/* [to_null,charset(UTF16)] */
	uint16_t logpixels;
	uint32_t bitsperpel;
	uint32_t pelswidth;
	uint32_t pelsheight;
	enum spoolss_DeviceModeNUp displayflags;
	uint32_t displayfrequency;
	enum spoolss_DeviceModeICMMethod icmmethod;
	enum spoolss_DeviceModeICMIntent icmintent;
	enum spoolss_DeviceModeMediaType mediatype;
	enum spoolss_DeviceModeDitherType dithertype;
	uint32_t reserved1;
	uint32_t reserved2;
	uint32_t panningwidth;
	uint32_t panningheight;
	DATA_BLOB driverextra_data;/* [subcontext(0),subcontext_size(__driverextra_length),flag(LIBNDR_FLAG_REMAINING)] */
}/* [public,gensize] */;

/* bitmap spoolss_EnumPrinterFlags */
#define PRINTER_ENUM_DEFAULT ( 0x00000001 )
#define PRINTER_ENUM_LOCAL ( 0x00000002 )
#define PRINTER_ENUM_CONNECTIONS ( 0x00000004 )
#define PRINTER_ENUM_FAVORITE ( 0x00000004 )
#define PRINTER_ENUM_NAME ( 0x00000008 )
#define PRINTER_ENUM_REMOTE ( 0x00000010 )
#define PRINTER_ENUM_SHARED ( 0x00000020 )
#define PRINTER_ENUM_NETWORK ( 0x00000040 )
#define PRINTER_ENUM_EXPAND ( 0x00004000 )
#define PRINTER_ENUM_CONTAINER ( 0x00008000 )
#define PRINTER_ENUM_ICON1 ( 0x00010000 )
#define PRINTER_ENUM_ICON2 ( 0x00020000 )
#define PRINTER_ENUM_ICON3 ( 0x00040000 )
#define PRINTER_ENUM_ICON4 ( 0x00080000 )
#define PRINTER_ENUM_ICON5 ( 0x00100000 )
#define PRINTER_ENUM_ICON6 ( 0x00200000 )
#define PRINTER_ENUM_ICON7 ( 0x00400000 )
#define PRINTER_ENUM_ICON8 ( 0x00800000 )
#define PRINTER_ENUM_HIDE ( 0x01000000 )

/* bitmap spoolss_PrinterAttributes */
#define PRINTER_ATTRIBUTE_QUEUED ( 0x00000001 )
#define PRINTER_ATTRIBUTE_DIRECT ( 0x00000002 )
#define PRINTER_ATTRIBUTE_DEFAULT ( 0x00000004 )
#define PRINTER_ATTRIBUTE_SHARED ( 0x00000008 )
#define PRINTER_ATTRIBUTE_NETWORK ( 0x00000010 )
#define PRINTER_ATTRIBUTE_HIDDEN ( 0x00000020 )
#define PRINTER_ATTRIBUTE_LOCAL ( 0x00000040 )
#define PRINTER_ATTRIBUTE_ENABLE_DEVQ ( 0x00000080 )
#define PRINTER_ATTRIBUTE_KEEPPRINTEDJOBS ( 0x00000100 )
#define PRINTER_ATTRIBUTE_DO_COMPLETE_FIRST ( 0x00000200 )
#define PRINTER_ATTRIBUTE_WORK_OFFLINE ( 0x00000400 )
#define PRINTER_ATTRIBUTE_ENABLE_BIDI ( 0x00000800 )
#define PRINTER_ATTRIBUTE_RAW_ONLY ( 0x00001000 )
#define PRINTER_ATTRIBUTE_PUBLISHED ( 0x00002000 )
#define PRINTER_ATTRIBUTE_FAX ( 0x00004000 )
#define PRINTER_ATTRIBUTE_TS ( 0x00008000 )

struct spoolss_PrinterInfo1 {
	uint32_t flags;
	const char * description;/* [relative,flag(LIBNDR_FLAG_STR_NULLTERM|LIBNDR_FLAG_ALIGN2)] */
	const char * name;/* [relative,flag(LIBNDR_FLAG_STR_NULLTERM|LIBNDR_FLAG_ALIGN2)] */
	const char * comment;/* [flag(LIBNDR_FLAG_STR_NULLTERM|LIBNDR_FLAG_ALIGN2),relative] */
}/* [public,gensize] */;

struct spoolss_PrinterInfo2 {
	const char * servername;/* [relative,flag(LIBNDR_FLAG_STR_NULLTERM|LIBNDR_FLAG_ALIGN2)] */
	const char * printername;/* [relative,flag(LIBNDR_FLAG_STR_NULLTERM|LIBNDR_FLAG_ALIGN2)] */
	const char * sharename;/* [flag(LIBNDR_FLAG_STR_NULLTERM|LIBNDR_FLAG_ALIGN2),relative] */
	const char * portname;/* [relative,flag(LIBNDR_FLAG_STR_NULLTERM|LIBNDR_FLAG_ALIGN2)] */
	const char * drivername;/* [flag(LIBNDR_FLAG_STR_NULLTERM|LIBNDR_FLAG_ALIGN2),relative] */
	const char * comment;/* [relative,flag(LIBNDR_FLAG_STR_NULLTERM|LIBNDR_FLAG_ALIGN2)] */
	const char * location;/* [relative,flag(LIBNDR_FLAG_STR_NULLTERM|LIBNDR_FLAG_ALIGN2)] */
	struct spoolss_DeviceMode *devmode;/* [relative,subcontext(0),flag(LIBNDR_FLAG_ALIGN4)] */
	const char * sepfile;/* [relative,flag(LIBNDR_FLAG_STR_NULLTERM|LIBNDR_FLAG_ALIGN2)] */
	const char * printprocessor;/* [relative,flag(LIBNDR_FLAG_STR_NULLTERM|LIBNDR_FLAG_ALIGN2)] */
	const char * datatype;/* [relative,flag(LIBNDR_FLAG_STR_NULLTERM|LIBNDR_FLAG_ALIGN2)] */
	const char * parameters;/* [flag(LIBNDR_FLAG_STR_NULLTERM|LIBNDR_FLAG_ALIGN2),relative] */
	struct spoolss_security_descriptor *secdesc;/* [flag(LIBNDR_FLAG_ALIGN4),subcontext(0),relative] */
	uint32_t attributes;
	uint32_t priority;/* [range(0,99)] */
	uint32_t defaultpriority;
	uint32_t starttime;
	uint32_t untiltime;
	uint32_t status;
	uint32_t cjobs;
	uint32_t averageppm;
}/* [gensize,nopush,public] */;

struct spoolss_PrinterInfo3 {
	struct spoolss_security_descriptor *secdesc;/* [relative,subcontext(0),flag(LIBNDR_FLAG_ALIGN4)] */
}/* [gensize,public] */;

struct spoolss_PrinterInfo4 {
	const char * printername;/* [flag(LIBNDR_FLAG_STR_NULLTERM|LIBNDR_FLAG_ALIGN2),relative] */
	const char * servername;/* [relative,flag(LIBNDR_FLAG_STR_NULLTERM|LIBNDR_FLAG_ALIGN2)] */
	uint32_t attributes;
}/* [gensize,public] */;

struct spoolss_PrinterInfo5 {
	const char * printername;/* [relative,flag(LIBNDR_FLAG_STR_NULLTERM|LIBNDR_FLAG_ALIGN2)] */
	const char * portname;/* [flag(LIBNDR_FLAG_STR_NULLTERM|LIBNDR_FLAG_ALIGN2),relative] */
	uint32_t attributes;
	uint32_t device_not_selected_timeout;
	uint32_t transmission_retry_timeout;
}/* [gensize,public] */;

struct spoolss_PrinterInfo6 {
	uint32_t status;
}/* [public,gensize] */;

/* bitmap spoolss_DsPrintAction */
#define DSPRINT_PUBLISH ( 0x00000001 )
#define DSPRINT_UPDATE ( 0x00000002 )
#define DSPRINT_UNPUBLISH ( 0x00000004 )
#define DSPRINT_REPUBLISH ( 0x00000008 )
#define DSPRINT_PENDING ( 0x80000000 )

struct spoolss_PrinterInfo7 {
	const char * guid;/* [relative,flag(LIBNDR_FLAG_STR_NULLTERM|LIBNDR_FLAG_ALIGN2)] */
	uint32_t action;
}/* [public,gensize] */;

struct spoolss_DeviceModeInfo {
	struct spoolss_DeviceMode *devmode;/* [flag(LIBNDR_FLAG_ALIGN4),relative,subcontext(0)] */
};

union spoolss_PrinterInfo {
	struct spoolss_PrinterInfo0 info0;/* [case(0)] */
	struct spoolss_PrinterInfo1 info1;/* [case] */
	struct spoolss_PrinterInfo2 info2;/* [case(2)] */
	struct spoolss_PrinterInfo3 info3;/* [case(3)] */
	struct spoolss_PrinterInfo4 info4;/* [case(4)] */
	struct spoolss_PrinterInfo5 info5;/* [case(5)] */
	struct spoolss_PrinterInfo6 info6;/* [case(6)] */
	struct spoolss_PrinterInfo7 info7;/* [case(7)] */
	struct spoolss_DeviceModeInfo info8;/* [case(8)] */
	struct spoolss_DeviceModeInfo info9;/* [case(9)] */
}/* [relative_base,public,flag(LIBNDR_FLAG_RELATIVE_REVERSE),gensize,nodiscriminant] */;

struct spoolss_DevmodeContainer {
	uint32_t _ndr_size;/* [value(_ndr_size_spoolss_DeviceMode(devmode,ndr->flags))] */
	struct spoolss_DeviceMode *devmode;/* [subcontext_size(_ndr_size),subcontext(4),unique] */
};

struct spoolss_JobInfo1 {
	uint32_t job_id;
	const char * printer_name;/* [relative,flag(LIBNDR_FLAG_STR_NULLTERM|LIBNDR_FLAG_ALIGN2)] */
	const char * server_name;/* [flag(LIBNDR_FLAG_STR_NULLTERM|LIBNDR_FLAG_ALIGN2),relative] */
	const char * user_name;/* [flag(LIBNDR_FLAG_STR_NULLTERM|LIBNDR_FLAG_ALIGN2),relative] */
	const char * document_name;/* [flag(LIBNDR_FLAG_STR_NULLTERM|LIBNDR_FLAG_ALIGN2),relative] */
	const char * data_type;/* [flag(LIBNDR_FLAG_STR_NULLTERM|LIBNDR_FLAG_ALIGN2),relative] */
	const char * text_status;/* [flag(LIBNDR_FLAG_STR_NULLTERM|LIBNDR_FLAG_ALIGN2),relative] */
	uint32_t status;
	uint32_t priority;/* [range(0,99)] */
	uint32_t position;
	uint32_t total_pages;
	uint32_t pages_printed;
	struct spoolss_Time submitted;
}/* [gensize,public] */;

struct spoolss_JobInfo2 {
	uint32_t job_id;
	const char * printer_name;/* [flag(LIBNDR_FLAG_STR_NULLTERM|LIBNDR_FLAG_ALIGN2),relative] */
	const char * server_name;/* [flag(LIBNDR_FLAG_STR_NULLTERM|LIBNDR_FLAG_ALIGN2),relative] */
	const char * user_name;/* [relative,flag(LIBNDR_FLAG_STR_NULLTERM|LIBNDR_FLAG_ALIGN2)] */
	const char * document_name;/* [relative,flag(LIBNDR_FLAG_STR_NULLTERM|LIBNDR_FLAG_ALIGN2)] */
	const char * notify_name;/* [flag(LIBNDR_FLAG_STR_NULLTERM|LIBNDR_FLAG_ALIGN2),relative] */
	const char * data_type;/* [relative,flag(LIBNDR_FLAG_STR_NULLTERM|LIBNDR_FLAG_ALIGN2)] */
	const char * print_processor;/* [relative,flag(LIBNDR_FLAG_STR_NULLTERM|LIBNDR_FLAG_ALIGN2)] */
	const char * parameters;/* [relative,flag(LIBNDR_FLAG_STR_NULLTERM|LIBNDR_FLAG_ALIGN2)] */
	const char * driver_name;/* [relative,flag(LIBNDR_FLAG_STR_NULLTERM|LIBNDR_FLAG_ALIGN2)] */
	struct spoolss_DeviceMode *devmode;/* [relative,subcontext(0),flag(LIBNDR_FLAG_ALIGN4)] */
	const char * text_status;/* [relative,flag(LIBNDR_FLAG_STR_NULLTERM|LIBNDR_FLAG_ALIGN2)] */
	struct spoolss_security_descriptor *secdesc;/* [subcontext(0),relative,flag(LIBNDR_FLAG_ALIGN4)] */
	uint32_t status;
	uint32_t priority;/* [range(0,99)] */
	uint32_t position;
	uint32_t start_time;
	uint32_t until_time;
	uint32_t total_pages;
	uint32_t size;
	struct spoolss_Time submitted;
	uint32_t time;
	uint32_t pages_printed;
}/* [public,gensize] */;

struct spoolss_JobInfo3 {
	uint32_t job_id;
	uint32_t next_job_id;
	uint32_t reserved;
}/* [public,gensize] */;

struct spoolss_JobInfo4 {
	uint32_t job_id;
	const char * printer_name;/* [flag(LIBNDR_FLAG_STR_NULLTERM|LIBNDR_FLAG_ALIGN2),relative] */
	const char * server_name;/* [relative,flag(LIBNDR_FLAG_STR_NULLTERM|LIBNDR_FLAG_ALIGN2)] */
	const char * user_name;/* [relative,flag(LIBNDR_FLAG_STR_NULLTERM|LIBNDR_FLAG_ALIGN2)] */
	const char * document_name;/* [flag(LIBNDR_FLAG_STR_NULLTERM|LIBNDR_FLAG_ALIGN2),relative] */
	const char * notify_name;/* [flag(LIBNDR_FLAG_STR_NULLTERM|LIBNDR_FLAG_ALIGN2),relative] */
	const char * data_type;/* [flag(LIBNDR_FLAG_STR_NULLTERM|LIBNDR_FLAG_ALIGN2),relative] */
	const char * print_processor;/* [flag(LIBNDR_FLAG_STR_NULLTERM|LIBNDR_FLAG_ALIGN2),relative] */
	const char * parameters;/* [relative,flag(LIBNDR_FLAG_STR_NULLTERM|LIBNDR_FLAG_ALIGN2)] */
	const char * driver_name;/* [flag(LIBNDR_FLAG_STR_NULLTERM|LIBNDR_FLAG_ALIGN2),relative] */
	struct spoolss_DeviceMode *devmode;/* [subcontext(0),relative,flag(LIBNDR_FLAG_ALIGN4)] */
	const char * text_status;/* [flag(LIBNDR_FLAG_STR_NULLTERM|LIBNDR_FLAG_ALIGN2),relative] */
	struct spoolss_security_descriptor *secdesc;/* [flag(LIBNDR_FLAG_ALIGN4),relative,subcontext(0)] */
	uint32_t status;
	uint32_t priority;/* [range(0,99)] */
	uint32_t position;
	uint32_t start_time;
	uint32_t until_time;
	uint32_t total_pages;
	uint32_t size;
	struct spoolss_Time submitted;
	uint32_t time;
	uint32_t pages_printed;
	uint32_t size_high;
}/* [public,gensize] */;

union spoolss_JobInfo {
	struct spoolss_JobInfo1 info1;/* [case] */
	struct spoolss_JobInfo2 info2;/* [case(2)] */
	struct spoolss_JobInfo3 info3;/* [case(3)] */
	struct spoolss_JobInfo4 info4;/* [case(4)] */
}/* [gensize,nodiscriminant,relative_base,public,flag(LIBNDR_FLAG_RELATIVE_REVERSE)] */;

struct spoolss_SetJobInfo1 {
	uint32_t job_id;
	const char *printer_name;/* [charset(UTF16),unique] */
	const char *server_name;/* [charset(UTF16),unique] */
	const char *user_name;/* [unique,charset(UTF16)] */
	const char *document_name;/* [unique,charset(UTF16)] */
	const char *data_type;/* [unique,charset(UTF16)] */
	const char *text_status;/* [unique,charset(UTF16)] */
	uint32_t status;
	uint32_t priority;/* [range(0,99)] */
	uint32_t position;
	uint32_t total_pages;
	uint32_t pages_printed;
	struct spoolss_Time submitted;
};

struct spoolss_SetJobInfo2 {
	uint32_t job_id;
	const char *printer_name;/* [charset(UTF16),unique] */
	const char *server_name;/* [charset(UTF16),unique] */
	const char *user_name;/* [charset(UTF16),unique] */
	const char *document_name;/* [charset(UTF16),unique] */
	const char *notify_name;/* [unique,charset(UTF16)] */
	const char *data_type;/* [charset(UTF16),unique] */
	const char *print_processor;/* [unique,charset(UTF16)] */
	const char *parameters;/* [unique,charset(UTF16)] */
	const char *driver_name;/* [unique,charset(UTF16)] */
	uint32_t _devmode_ptr;
	const char *text_status;/* [unique,charset(UTF16)] */
	uint32_t _secdesc_ptr;
	uint32_t status;
	uint32_t priority;/* [range(0,99)] */
	uint32_t position;
	uint32_t start_time;
	uint32_t until_time;
	uint32_t total_pages;
	uint32_t size;
	struct spoolss_Time submitted;
	uint32_t time;
	uint32_t pages_printed;
};

struct spoolss_SetJobInfo4 {
	uint32_t job_id;
	const char *printer_name;/* [unique,charset(UTF16)] */
	const char *server_name;/* [charset(UTF16),unique] */
	const char *user_name;/* [charset(UTF16),unique] */
	const char *document_name;/* [charset(UTF16),unique] */
	const char *notify_name;/* [charset(UTF16),unique] */
	const char *data_type;/* [charset(UTF16),unique] */
	const char *print_processor;/* [unique,charset(UTF16)] */
	const char *parameters;/* [unique,charset(UTF16)] */
	const char *driver_name;/* [charset(UTF16),unique] */
	uint32_t _devmode_ptr;
	const char *text_status;/* [charset(UTF16),unique] */
	uint32_t _secdesc_ptr;
	uint32_t status;
	uint32_t priority;/* [range(0,99)] */
	uint32_t position;
	uint32_t start_time;
	uint32_t until_time;
	uint32_t total_pages;
	uint32_t size;
	struct spoolss_Time submitted;
	uint32_t time;
	uint32_t pages_printed;
	uint32_t size_high;
};

union spoolss_SetJobInfo {
	struct spoolss_SetJobInfo1 *info1;/* [unique,case] */
	struct spoolss_SetJobInfo2 *info2;/* [unique,case(2)] */
	struct spoolss_JobInfo3 *info3;/* [case(3),unique] */
	struct spoolss_SetJobInfo4 *info4;/* [unique,case(4)] */
}/* [public] */;

struct spoolss_JobInfoContainer {
	uint32_t level;
	union spoolss_SetJobInfo info;/* [switch_is(level)] */
};

enum spoolss_JobControl
#ifndef USE_UINT_ENUMS
 {
	SPOOLSS_JOB_CONTROL_PAUSE=(int)(1),
	SPOOLSS_JOB_CONTROL_RESUME=(int)(2),
	SPOOLSS_JOB_CONTROL_CANCEL=(int)(3),
	SPOOLSS_JOB_CONTROL_RESTART=(int)(4),
	SPOOLSS_JOB_CONTROL_DELETE=(int)(5),
	SPOOLSS_JOB_CONTROL_SEND_TO_PRINTER=(int)(6),
	SPOOLSS_JOB_CONTROL_LAST_PAGE_EJECTED=(int)(7),
	SPOOLSS_JOB_CONTROL_RETAIN=(int)(8),
	SPOOLSS_JOB_CONTROL_RELEASE=(int)(9)
}
#else
 { __donnot_use_enum_spoolss_JobControl=0x7FFFFFFF}
#define SPOOLSS_JOB_CONTROL_PAUSE ( 1 )
#define SPOOLSS_JOB_CONTROL_RESUME ( 2 )
#define SPOOLSS_JOB_CONTROL_CANCEL ( 3 )
#define SPOOLSS_JOB_CONTROL_RESTART ( 4 )
#define SPOOLSS_JOB_CONTROL_DELETE ( 5 )
#define SPOOLSS_JOB_CONTROL_SEND_TO_PRINTER ( 6 )
#define SPOOLSS_JOB_CONTROL_LAST_PAGE_EJECTED ( 7 )
#define SPOOLSS_JOB_CONTROL_RETAIN ( 8 )
#define SPOOLSS_JOB_CONTROL_RELEASE ( 9 )
#endif
;

enum spoolss_PrinterControl
#ifndef USE_UINT_ENUMS
 {
	SPOOLSS_PRINTER_CONTROL_UNPAUSE=(int)(0),
	SPOOLSS_PRINTER_CONTROL_PAUSE=(int)(1),
	SPOOLSS_PRINTER_CONTROL_RESUME=(int)(2),
	SPOOLSS_PRINTER_CONTROL_PURGE=(int)(3),
	SPOOLSS_PRINTER_CONTROL_SET_STATUS=(int)(4)
}
#else
 { __donnot_use_enum_spoolss_PrinterControl=0x7FFFFFFF}
#define SPOOLSS_PRINTER_CONTROL_UNPAUSE ( 0 )
#define SPOOLSS_PRINTER_CONTROL_PAUSE ( 1 )
#define SPOOLSS_PRINTER_CONTROL_RESUME ( 2 )
#define SPOOLSS_PRINTER_CONTROL_PURGE ( 3 )
#define SPOOLSS_PRINTER_CONTROL_SET_STATUS ( 4 )
#endif
;

struct spoolss_SetPrinterInfo0 {
	const char *servername;/* [charset(UTF16),unique] */
	const char *printername;/* [charset(UTF16),unique] */
	uint32_t cjobs;
	uint32_t total_jobs;
	uint32_t total_bytes;
	struct spoolss_Time time;
	uint32_t global_counter;
	uint32_t total_pages;
	uint32_t version;
	enum spoolss_Build free_build;
	uint32_t spooling;
	uint32_t max_spooling;
	uint32_t session_counter;
	uint32_t num_error_out_of_paper;
	uint32_t num_error_not_ready;
	uint32_t job_error;
	uint32_t number_of_processors;
	enum spoolss_ProcessorType processor_type;
	uint32_t high_part_total_bytes;
	uint32_t change_id;
	WERROR last_error;
	uint32_t status;
	uint32_t enumerate_network_printers;
	uint32_t c_setprinter;
	enum spoolss_ProcessorArchitecture processor_architecture;
	uint16_t processor_level;
	uint32_t ref_ic;
	uint32_t reserved2;
	uint32_t reserved3;
};

struct spoolss_SetPrinterInfo1 {
	uint32_t flags;
	const char *description;/* [charset(UTF16),unique] */
	const char *name;/* [unique,charset(UTF16)] */
	const char *comment;/* [unique,charset(UTF16)] */
};

struct spoolss_SetPrinterInfo2 {
	const char *servername;/* [unique,charset(UTF16)] */
	const char *printername;/* [unique,charset(UTF16)] */
	const char *sharename;/* [unique,charset(UTF16)] */
	const char *portname;/* [unique,charset(UTF16)] */
	const char *drivername;/* [unique,charset(UTF16)] */
	const char *comment;/* [charset(UTF16),unique] */
	const char *location;/* [charset(UTF16),unique] */
	uint32_t devmode_ptr;
	const char *sepfile;/* [unique,charset(UTF16)] */
	const char *printprocessor;/* [charset(UTF16),unique] */
	const char *datatype;/* [unique,charset(UTF16)] */
	const char *parameters;/* [charset(UTF16),unique] */
	uint32_t secdesc_ptr;
	uint32_t attributes;
	uint32_t priority;/* [range(0,99)] */
	uint32_t defaultpriority;
	uint32_t starttime;
	uint32_t untiltime;
	uint32_t status;
	uint32_t cjobs;
	uint32_t averageppm;
};

struct spoolss_SetPrinterInfo3 {
	uint32_t sec_desc_ptr;
};

struct spoolss_SetPrinterInfo4 {
	const char *printername;/* [unique,charset(UTF16)] */
	const char *servername;/* [unique,charset(UTF16)] */
	uint32_t attributes;
};

struct spoolss_SetPrinterInfo5 {
	const char *printername;/* [charset(UTF16),unique] */
	const char *portname;/* [unique,charset(UTF16)] */
	uint32_t attributes;
	uint32_t device_not_selected_timeout;
	uint32_t transmission_retry_timeout;
};

struct spoolss_SetPrinterInfo6 {
	uint32_t status;
};

struct spoolss_SetPrinterInfo7 {
	const char *guid;/* [charset(UTF16),unique] */
	uint32_t action;
};

struct spoolss_SetPrinterInfo8 {
	uint32_t devmode_ptr;
};

struct spoolss_SetPrinterInfo9 {
	uint32_t devmode_ptr;
};

union spoolss_SetPrinterInfo {
	struct spoolss_SetPrinterInfo0 *info0;/* [case(0),unique] */
	struct spoolss_SetPrinterInfo1 *info1;/* [case,unique] */
	struct spoolss_SetPrinterInfo2 *info2;/* [case(2),unique] */
	struct spoolss_SetPrinterInfo3 *info3;/* [unique,case(3)] */
	struct spoolss_SetPrinterInfo4 *info4;/* [case(4),unique] */
	struct spoolss_SetPrinterInfo5 *info5;/* [unique,case(5)] */
	struct spoolss_SetPrinterInfo6 *info6;/* [unique,case(6)] */
	struct spoolss_SetPrinterInfo7 *info7;/* [unique,case(7)] */
	struct spoolss_SetPrinterInfo8 *info8;/* [case(8),unique] */
	struct spoolss_SetPrinterInfo9 *info9;/* [case(9),unique] */
}/* [switch_type(uint32)] */;

struct spoolss_SetPrinterInfoCtr {
	uint32_t level;
	union spoolss_SetPrinterInfo info;/* [switch_is(level)] */
};

struct spoolss_StringArray {
	uint32_t _ndr_size;/* [value((ndr_size_spoolss_StringArray(r,ndr->flags)-4)/2)] */
	const char ** string;/* [flag(LIBNDR_FLAG_STR_NULLTERM|LIBNDR_FLAG_ALIGN2)] */
}/* [public] */;

struct spoolss_AddDriverInfo1 {
	const char *driver_name;/* [charset(UTF16),unique] */
};

enum spoolss_DriverOSVersion
#ifndef USE_UINT_ENUMS
 {
	SPOOLSS_DRIVER_VERSION_9X=(int)(0),
	SPOOLSS_DRIVER_VERSION_NT35=(int)(1),
	SPOOLSS_DRIVER_VERSION_NT4=(int)(2),
	SPOOLSS_DRIVER_VERSION_200X=(int)(3),
	SPOOLSS_DRIVER_VERSION_2012=(int)(4)
}
#else
 { __donnot_use_enum_spoolss_DriverOSVersion=0x7FFFFFFF}
#define SPOOLSS_DRIVER_VERSION_9X ( 0 )
#define SPOOLSS_DRIVER_VERSION_NT35 ( 1 )
#define SPOOLSS_DRIVER_VERSION_NT4 ( 2 )
#define SPOOLSS_DRIVER_VERSION_200X ( 3 )
#define SPOOLSS_DRIVER_VERSION_2012 ( 4 )
#endif
;

struct spoolss_AddDriverInfo2 {
	enum spoolss_DriverOSVersion version;
	const char *driver_name;/* [unique,charset(UTF16)] */
	const char *architecture;/* [charset(UTF16),unique] */
	const char *driver_path;/* [unique,charset(UTF16)] */
	const char *data_file;/* [unique,charset(UTF16)] */
	const char *config_file;/* [unique,charset(UTF16)] */
};

struct spoolss_AddDriverInfo3 {
	enum spoolss_DriverOSVersion version;
	const char *driver_name;/* [unique,charset(UTF16)] */
	const char *architecture;/* [charset(UTF16),unique] */
	const char *driver_path;/* [charset(UTF16),unique] */
	const char *data_file;/* [charset(UTF16),unique] */
	const char *config_file;/* [unique,charset(UTF16)] */
	const char *help_file;/* [charset(UTF16),unique] */
	const char *monitor_name;/* [charset(UTF16),unique] */
	const char *default_datatype;/* [charset(UTF16),unique] */
	uint32_t _ndr_size_dependent_files;/* [value(((ndr_size_spoolss_StringArray(dependent_files,ndr->flags)-4)/2))] */
	struct spoolss_StringArray *dependent_files;/* [unique] */
};

struct spoolss_AddDriverInfo4 {
	enum spoolss_DriverOSVersion version;
	const char *driver_name;/* [unique,charset(UTF16)] */
	const char *architecture;/* [charset(UTF16),unique] */
	const char *driver_path;/* [charset(UTF16),unique] */
	const char *data_file;/* [charset(UTF16),unique] */
	const char *config_file;/* [charset(UTF16),unique] */
	const char *help_file;/* [charset(UTF16),unique] */
	const char *monitor_name;/* [unique,charset(UTF16)] */
	const char *default_datatype;/* [unique,charset(UTF16)] */
	uint32_t _ndr_size_dependent_files;/* [value(((ndr_size_spoolss_StringArray(dependent_files,ndr->flags)-4)/2))] */
	struct spoolss_StringArray *dependent_files;/* [unique] */
	uint32_t _ndr_size_previous_names;/* [value(((ndr_size_spoolss_StringArray(previous_names,ndr->flags)-4)/2))] */
	struct spoolss_StringArray *previous_names;/* [unique] */
};

/* bitmap spoolss_DriverAttributes */
#define PRINTER_DRIVER_PACKAGE_AWARE ( 0x00000002 )

struct spoolss_AddDriverInfo5 {
	enum spoolss_DriverOSVersion version;
	const char *driver_name;/* [charset(UTF16),unique] */
	const char *architecture;/* [unique,charset(UTF16)] */
	const char *driver_path;/* [charset(UTF16),unique] */
	const char *data_file;/* [unique,charset(UTF16)] */
	const char *config_file;/* [unique,charset(UTF16)] */
	uint32_t driver_attributes;
	uint32_t config_version;
	uint32_t driver_version;
};

struct spoolss_AddDriverInfo6 {
	enum spoolss_DriverOSVersion version;
	const char *driver_name;/* [charset(UTF16),unique] */
	const char *architecture;/* [unique,charset(UTF16)] */
	const char *driver_path;/* [unique,charset(UTF16)] */
	const char *data_file;/* [charset(UTF16),unique] */
	const char *config_file;/* [charset(UTF16),unique] */
	const char *help_file;/* [charset(UTF16),unique] */
	const char *monitor_name;/* [unique,charset(UTF16)] */
	const char *default_datatype;/* [unique,charset(UTF16)] */
	uint32_t _ndr_size_dependent_files;/* [value(((ndr_size_spoolss_StringArray(dependent_files,ndr->flags)-4)/2))] */
	struct spoolss_StringArray *dependent_files;/* [unique] */
	uint32_t _ndr_size_previous_names;/* [value(((ndr_size_spoolss_StringArray(previous_names,ndr->flags)-4)/2))] */
	struct spoolss_StringArray *previous_names;/* [unique] */
	NTTIME driver_date;
	uint64_t driver_version;
	const char *manufacturer_name;/* [unique,charset(UTF16)] */
	const char *manufacturer_url;/* [unique,charset(UTF16)] */
	const char *hardware_id;/* [charset(UTF16),unique] */
	const char *provider;/* [charset(UTF16),unique] */
};

struct spoolss_AddDriverInfo8 {
	enum spoolss_DriverOSVersion version;
	const char *driver_name;/* [charset(UTF16),unique] */
	const char *architecture;/* [charset(UTF16),unique] */
	const char *driver_path;/* [unique,charset(UTF16)] */
	const char *data_file;/* [charset(UTF16),unique] */
	const char *config_file;/* [unique,charset(UTF16)] */
	const char *help_file;/* [charset(UTF16),unique] */
	const char *monitor_name;/* [charset(UTF16),unique] */
	const char *default_datatype;/* [unique,charset(UTF16)] */
	uint32_t _ndr_size_dependent_files;/* [value(((ndr_size_spoolss_StringArray(dependent_files,ndr->flags)-4)/2))] */
	struct spoolss_StringArray *dependent_files;/* [unique] */
	uint32_t _ndr_size_previous_names;/* [value(((ndr_size_spoolss_StringArray(previous_names,ndr->flags)-4)/2))] */
	struct spoolss_StringArray *previous_names;/* [unique] */
	NTTIME driver_date;
	uint64_t driver_version;
	const char *manufacturer_name;/* [charset(UTF16),unique] */
	const char *manufacturer_url;/* [charset(UTF16),unique] */
	const char *hardware_id;/* [unique,charset(UTF16)] */
	const char *provider;/* [unique,charset(UTF16)] */
	const char *print_processor;/* [charset(UTF16),unique] */
	const char *vendor_setup;/* [unique,charset(UTF16)] */
	uint32_t _ndr_size_color_profiles;/* [value(((ndr_size_spoolss_StringArray(color_profiles,ndr->flags)-4)/2))] */
	struct spoolss_StringArray *color_profiles;/* [unique] */
	const char *inf_path;/* [unique,charset(UTF16)] */
	uint32_t printer_driver_attributes;
	uint32_t _ndr_size_core_driver_dependencies;/* [value(((ndr_size_spoolss_StringArray(core_driver_dependencies,ndr->flags)-4)/2))] */
	struct spoolss_StringArray *core_driver_dependencies;/* [unique] */
	NTTIME min_inbox_driver_ver_date;
	uint64_t min_inbox_driver_ver_version;
};

union spoolss_AddDriverInfo {
	struct spoolss_AddDriverInfo1 *info1;/* [case,unique] */
	struct spoolss_AddDriverInfo2 *info2;/* [unique,case(2)] */
	struct spoolss_AddDriverInfo3 *info3;/* [case(3),unique] */
	struct spoolss_AddDriverInfo4 *info4;/* [unique,case(4)] */
	struct spoolss_AddDriverInfo6 *info6;/* [unique,case(6)] */
	struct spoolss_AddDriverInfo8 *info8;/* [case(8),unique] */
}/* [switch_type(uint32)] */;

struct spoolss_AddDriverInfoCtr {
	uint32_t level;
	union spoolss_AddDriverInfo info;/* [switch_is(level)] */
};

struct spoolss_DriverInfo1 {
	const char * driver_name;/* [relative,flag(LIBNDR_FLAG_STR_NULLTERM|LIBNDR_FLAG_ALIGN2)] */
}/* [public,gensize] */;

struct spoolss_DriverInfo2 {
	enum spoolss_DriverOSVersion version;
	const char * driver_name;/* [flag(LIBNDR_FLAG_STR_NULLTERM|LIBNDR_FLAG_ALIGN2),relative] */
	const char * architecture;/* [flag(LIBNDR_FLAG_STR_NULLTERM|LIBNDR_FLAG_ALIGN2),relative] */
	const char * driver_path;/* [flag(LIBNDR_FLAG_STR_NULLTERM|LIBNDR_FLAG_ALIGN2),relative] */
	const char * data_file;/* [relative,flag(LIBNDR_FLAG_STR_NULLTERM|LIBNDR_FLAG_ALIGN2)] */
	const char * config_file;/* [relative,flag(LIBNDR_FLAG_STR_NULLTERM|LIBNDR_FLAG_ALIGN2)] */
}/* [gensize,public] */;

struct spoolss_DriverInfo3 {
	enum spoolss_DriverOSVersion version;
	const char * driver_name;/* [flag(LIBNDR_FLAG_STR_NULLTERM|LIBNDR_FLAG_ALIGN2),relative] */
	const char * architecture;/* [relative,flag(LIBNDR_FLAG_STR_NULLTERM|LIBNDR_FLAG_ALIGN2)] */
	const char * driver_path;/* [flag(LIBNDR_FLAG_STR_NULLTERM|LIBNDR_FLAG_ALIGN2),relative] */
	const char * data_file;/* [flag(LIBNDR_FLAG_STR_NULLTERM|LIBNDR_FLAG_ALIGN2),relative] */
	const char * config_file;/* [flag(LIBNDR_FLAG_STR_NULLTERM|LIBNDR_FLAG_ALIGN2),relative] */
	const char * help_file;/* [flag(LIBNDR_FLAG_STR_NULLTERM|LIBNDR_FLAG_ALIGN2),relative] */
	const char ** dependent_files;/* [relative,flag(LIBNDR_FLAG_STR_NULLTERM|LIBNDR_FLAG_ALIGN2)] */
	const char * monitor_name;/* [relative,flag(LIBNDR_FLAG_STR_NULLTERM|LIBNDR_FLAG_ALIGN2)] */
	const char * default_datatype;/* [relative,flag(LIBNDR_FLAG_STR_NULLTERM|LIBNDR_FLAG_ALIGN2)] */
}/* [gensize,public] */;

struct spoolss_DriverInfo4 {
	enum spoolss_DriverOSVersion version;
	const char * driver_name;/* [relative,flag(LIBNDR_FLAG_STR_NULLTERM|LIBNDR_FLAG_ALIGN2)] */
	const char * architecture;/* [flag(LIBNDR_FLAG_STR_NULLTERM|LIBNDR_FLAG_ALIGN2),relative] */
	const char * driver_path;/* [flag(LIBNDR_FLAG_STR_NULLTERM|LIBNDR_FLAG_ALIGN2),relative] */
	const char * data_file;/* [flag(LIBNDR_FLAG_STR_NULLTERM|LIBNDR_FLAG_ALIGN2),relative] */
	const char * config_file;/* [flag(LIBNDR_FLAG_STR_NULLTERM|LIBNDR_FLAG_ALIGN2),relative] */
	const char * help_file;/* [flag(LIBNDR_FLAG_STR_NULLTERM|LIBNDR_FLAG_ALIGN2),relative] */
	const char ** dependent_files;/* [flag(LIBNDR_FLAG_STR_NULLTERM|LIBNDR_FLAG_ALIGN2),relative] */
	const char * monitor_name;/* [relative,flag(LIBNDR_FLAG_STR_NULLTERM|LIBNDR_FLAG_ALIGN2)] */
	const char * default_datatype;/* [relative,flag(LIBNDR_FLAG_STR_NULLTERM|LIBNDR_FLAG_ALIGN2)] */
	const char ** previous_names;/* [relative,flag(LIBNDR_FLAG_STR_NULLTERM|LIBNDR_FLAG_ALIGN2)] */
}/* [public,gensize] */;

struct spoolss_DriverInfo5 {
	enum spoolss_DriverOSVersion version;
	const char * driver_name;/* [flag(LIBNDR_FLAG_STR_NULLTERM|LIBNDR_FLAG_ALIGN2),relative] */
	const char * architecture;/* [relative,flag(LIBNDR_FLAG_STR_NULLTERM|LIBNDR_FLAG_ALIGN2)] */
	const char * driver_path;/* [relative,flag(LIBNDR_FLAG_STR_NULLTERM|LIBNDR_FLAG_ALIGN2)] */
	const char * data_file;/* [flag(LIBNDR_FLAG_STR_NULLTERM|LIBNDR_FLAG_ALIGN2),relative] */
	const char * config_file;/* [flag(LIBNDR_FLAG_STR_NULLTERM|LIBNDR_FLAG_ALIGN2),relative] */
	uint32_t driver_attributes;
	uint32_t config_version;
	uint32_t driver_version;
}/* [public,gensize] */;

struct spoolss_DriverInfo6 {
	enum spoolss_DriverOSVersion version;
	const char * driver_name;/* [flag(LIBNDR_FLAG_STR_NULLTERM|LIBNDR_FLAG_ALIGN2),relative] */
	const char * architecture;/* [relative,flag(LIBNDR_FLAG_STR_NULLTERM|LIBNDR_FLAG_ALIGN2)] */
	const char * driver_path;/* [flag(LIBNDR_FLAG_STR_NULLTERM|LIBNDR_FLAG_ALIGN2),relative] */
	const char * data_file;/* [relative,flag(LIBNDR_FLAG_STR_NULLTERM|LIBNDR_FLAG_ALIGN2)] */
	const char * config_file;/* [flag(LIBNDR_FLAG_STR_NULLTERM|LIBNDR_FLAG_ALIGN2),relative] */
	const char * help_file;/* [flag(LIBNDR_FLAG_STR_NULLTERM|LIBNDR_FLAG_ALIGN2),relative] */
	const char ** dependent_files;/* [relative,flag(LIBNDR_FLAG_STR_NULLTERM|LIBNDR_FLAG_ALIGN2)] */
	const char * monitor_name;/* [relative,flag(LIBNDR_FLAG_STR_NULLTERM|LIBNDR_FLAG_ALIGN2)] */
	const char * default_datatype;/* [relative,flag(LIBNDR_FLAG_STR_NULLTERM|LIBNDR_FLAG_ALIGN2)] */
	const char ** previous_names;/* [relative,flag(LIBNDR_FLAG_STR_NULLTERM|LIBNDR_FLAG_ALIGN2)] */
	NTTIME driver_date;
	uint64_t driver_version;
	const char * manufacturer_name;/* [relative,flag(LIBNDR_FLAG_STR_NULLTERM|LIBNDR_FLAG_ALIGN2)] */
	const char * manufacturer_url;/* [flag(LIBNDR_FLAG_STR_NULLTERM|LIBNDR_FLAG_ALIGN2),relative] */
	const char * hardware_id;/* [relative,flag(LIBNDR_FLAG_STR_NULLTERM|LIBNDR_FLAG_ALIGN2)] */
	const char * provider;/* [flag(LIBNDR_FLAG_STR_NULLTERM|LIBNDR_FLAG_ALIGN2),relative] */
}/* [public,gensize] */;

struct spoolss_DriverInfo7 {
	uint32_t size;
	enum spoolss_DriverOSVersion version;
	const char * driver_name;/* [relative,flag(LIBNDR_FLAG_STR_NULLTERM|LIBNDR_FLAG_ALIGN2)] */
	const char * inf_name;/* [relative,flag(LIBNDR_FLAG_STR_NULLTERM|LIBNDR_FLAG_ALIGN2)] */
	const char * install_source_root;/* [relative,flag(LIBNDR_FLAG_STR_NULLTERM|LIBNDR_FLAG_ALIGN2)] */
}/* [gensize,public] */;

struct spoolss_DriverInfo8 {
	enum spoolss_DriverOSVersion version;
	const char * driver_name;/* [relative,flag(LIBNDR_FLAG_STR_NULLTERM|LIBNDR_FLAG_ALIGN2)] */
	const char * architecture;/* [relative,flag(LIBNDR_FLAG_STR_NULLTERM|LIBNDR_FLAG_ALIGN2)] */
	const char * driver_path;/* [relative,flag(LIBNDR_FLAG_STR_NULLTERM|LIBNDR_FLAG_ALIGN2)] */
	const char * data_file;/* [relative,flag(LIBNDR_FLAG_STR_NULLTERM|LIBNDR_FLAG_ALIGN2)] */
	const char * config_file;/* [flag(LIBNDR_FLAG_STR_NULLTERM|LIBNDR_FLAG_ALIGN2),relative] */
	const char * help_file;/* [relative,flag(LIBNDR_FLAG_STR_NULLTERM|LIBNDR_FLAG_ALIGN2)] */
	const char ** dependent_files;/* [relative,flag(LIBNDR_FLAG_STR_NULLTERM|LIBNDR_FLAG_ALIGN2)] */
	const char * monitor_name;/* [relative,flag(LIBNDR_FLAG_STR_NULLTERM|LIBNDR_FLAG_ALIGN2)] */
	const char * default_datatype;/* [flag(LIBNDR_FLAG_STR_NULLTERM|LIBNDR_FLAG_ALIGN2),relative] */
	const char ** previous_names;/* [relative,flag(LIBNDR_FLAG_STR_NULLTERM|LIBNDR_FLAG_ALIGN2)] */
	NTTIME driver_date;
	uint64_t driver_version;
	const char * manufacturer_name;/* [flag(LIBNDR_FLAG_STR_NULLTERM|LIBNDR_FLAG_ALIGN2),relative] */
	const char * manufacturer_url;/* [relative,flag(LIBNDR_FLAG_STR_NULLTERM|LIBNDR_FLAG_ALIGN2)] */
	const char * hardware_id;/* [relative,flag(LIBNDR_FLAG_STR_NULLTERM|LIBNDR_FLAG_ALIGN2)] */
	const char * provider;/* [flag(LIBNDR_FLAG_STR_NULLTERM|LIBNDR_FLAG_ALIGN2),relative] */
	const char * print_processor;/* [flag(LIBNDR_FLAG_STR_NULLTERM|LIBNDR_FLAG_ALIGN2),relative] */
	const char * vendor_setup;/* [flag(LIBNDR_FLAG_STR_NULLTERM|LIBNDR_FLAG_ALIGN2),relative] */
	const char ** color_profiles;/* [relative,flag(LIBNDR_FLAG_STR_NULLTERM|LIBNDR_FLAG_ALIGN2)] */
	const char * inf_path;/* [relative,flag(LIBNDR_FLAG_STR_NULLTERM|LIBNDR_FLAG_ALIGN2)] */
	uint32_t printer_driver_attributes;
	const char ** core_driver_dependencies;/* [relative,flag(LIBNDR_FLAG_STR_NULLTERM|LIBNDR_FLAG_ALIGN2)] */
	NTTIME min_inbox_driver_ver_date;
	uint64_t min_inbox_driver_ver_version;
}/* [gensize,public] */;

enum spoolss_DriverFileType
#ifndef USE_UINT_ENUMS
 {
	SPOOLSS_DRIVER_FILE_TYPE_RENDERING=(int)(0x00000000),
	SPOOLSS_DRIVER_FILE_TYPE_CONFIGURATION=(int)(0x00000001),
	SPOOLSS_DRIVER_FILE_TYPE_DATA=(int)(0x00000002),
	SPOOLSS_DRIVER_FILE_TYPE_HELP=(int)(0x00000003),
	SPOOLSS_DRIVER_FILE_TYPE_OTHER=(int)(0x00000004)
}
#else
 { __donnot_use_enum_spoolss_DriverFileType=0x7FFFFFFF}
#define SPOOLSS_DRIVER_FILE_TYPE_RENDERING ( 0x00000000 )
#define SPOOLSS_DRIVER_FILE_TYPE_CONFIGURATION ( 0x00000001 )
#define SPOOLSS_DRIVER_FILE_TYPE_DATA ( 0x00000002 )
#define SPOOLSS_DRIVER_FILE_TYPE_HELP ( 0x00000003 )
#define SPOOLSS_DRIVER_FILE_TYPE_OTHER ( 0x00000004 )
#endif
;

struct spoolss_DriverFileInfo {
	const char * file_name;/* [flag(LIBNDR_FLAG_STR_NULLTERM|LIBNDR_FLAG_ALIGN2),relative] */
	enum spoolss_DriverFileType file_type;
	uint32_t file_version;
}/* [public] */;

struct spoolss_DriverInfo101 {
	enum spoolss_DriverOSVersion version;
	const char * driver_name;/* [relative,flag(LIBNDR_FLAG_STR_NULLTERM|LIBNDR_FLAG_ALIGN2)] */
	const char * architecture;/* [relative,flag(LIBNDR_FLAG_STR_NULLTERM|LIBNDR_FLAG_ALIGN2)] */
	struct spoolss_DriverFileInfo *file_info;/* [relative,flag(LIBNDR_FLAG_ALIGN4),size_is(file_count)] */
	uint32_t file_count;
	const char * monitor_name;/* [relative,flag(LIBNDR_FLAG_STR_NULLTERM|LIBNDR_FLAG_ALIGN2)] */
	const char * default_datatype;/* [relative,flag(LIBNDR_FLAG_STR_NULLTERM|LIBNDR_FLAG_ALIGN2)] */
	const char ** previous_names;/* [flag(LIBNDR_FLAG_STR_NULLTERM|LIBNDR_FLAG_ALIGN2),relative] */
	NTTIME driver_date;
	uint64_t driver_version;
	const char * manufacturer_name;/* [relative,flag(LIBNDR_FLAG_STR_NULLTERM|LIBNDR_FLAG_ALIGN2)] */
	const char * manufacturer_url;/* [relative,flag(LIBNDR_FLAG_STR_NULLTERM|LIBNDR_FLAG_ALIGN2)] */
	const char * hardware_id;/* [flag(LIBNDR_FLAG_STR_NULLTERM|LIBNDR_FLAG_ALIGN2),relative] */
	const char * provider;/* [flag(LIBNDR_FLAG_STR_NULLTERM|LIBNDR_FLAG_ALIGN2),relative] */
}/* [gensize,nopush,nopull,public] */;

union spoolss_DriverInfo {
	struct spoolss_DriverInfo1 info1;/* [case] */
	struct spoolss_DriverInfo2 info2;/* [case(2)] */
	struct spoolss_DriverInfo3 info3;/* [case(3)] */
	struct spoolss_DriverInfo4 info4;/* [case(4)] */
	struct spoolss_DriverInfo5 info5;/* [case(5)] */
	struct spoolss_DriverInfo6 info6;/* [case(6)] */
	struct spoolss_DriverInfo7 info7;/* [case(7)] */
	struct spoolss_DriverInfo8 info8;/* [case(8)] */
	struct spoolss_DriverInfo101 info101;/* [case(101)] */
}/* [flag(LIBNDR_FLAG_RELATIVE_REVERSE),relative_base,public,gensize,nodiscriminant] */;

struct spoolss_DriverDirectoryInfo1 {
	const char * directory_name;/* [flag(LIBNDR_FLAG_STR_NULLTERM|LIBNDR_FLAG_ALIGN2)] */
}/* [gensize,public] */;

union spoolss_DriverDirectoryInfo {
	struct spoolss_DriverDirectoryInfo1 info1;/* [case] */
}/* [public,relative_base,flag(LIBNDR_FLAG_RELATIVE_REVERSE),nodiscriminant,gensize] */;

struct spoolss_PrintProcessorInfo1 {
	const char * print_processor_name;/* [relative,flag(LIBNDR_FLAG_STR_NULLTERM|LIBNDR_FLAG_ALIGN2)] */
}/* [public,gensize] */;

union spoolss_PrintProcessorInfo {
	struct spoolss_PrintProcessorInfo1 info1;/* [case] */
}/* [nodiscriminant,public,relative_base,flag(LIBNDR_FLAG_RELATIVE_REVERSE)] */;

struct spoolss_PrintProcessorDirectoryInfo1 {
	const char * directory_name;/* [flag(LIBNDR_FLAG_STR_NULLTERM|LIBNDR_FLAG_ALIGN2)] */
}/* [public,gensize] */;

union spoolss_PrintProcessorDirectoryInfo {
	struct spoolss_PrintProcessorDirectoryInfo1 info1;/* [case] */
}/* [nodiscriminant,gensize,flag(LIBNDR_FLAG_RELATIVE_REVERSE),public,relative_base] */;

struct spoolss_DocumentInfo1 {
	const char *document_name;/* [unique,charset(UTF16)] */
	const char *output_file;/* [unique,charset(UTF16)] */
	const char *datatype;/* [charset(UTF16),unique] */
};

union spoolss_DocumentInfo {
	struct spoolss_DocumentInfo1 *info1;/* [unique,case] */
}/* [switch_type(uint32)] */;

struct spoolss_OSVersion {
	uint32_t _ndr_size;/* [value(ndr_size_spoolss_OSVersion(r,ndr->flags))] */
	uint32_t major;
	uint32_t minor;
	uint32_t build;
	uint32_t platform_id;/* [value(2)] */
	const char * extra_string;/* [subcontext_size(256),subcontext(0),flag(LIBNDR_FLAG_STR_NULLTERM|LIBNDR_FLAG_ALIGN2)] */
}/* [public,gensize] */;

struct spoolss_OSVersionEx {
	uint32_t _ndr_size;/* [value(ndr_size_spoolss_OSVersionEx(r,ndr->flags))] */
	uint32_t major;
	uint32_t minor;
	uint32_t build;
	uint32_t platform_id;/* [value(2)] */
	const char * extra_string;/* [flag(LIBNDR_FLAG_STR_NULLTERM|LIBNDR_FLAG_ALIGN2),subcontext_size(256),subcontext(0)] */
	uint16_t service_pack_major;
	uint16_t service_pack_minor;
	uint16_t suite_mask;
	uint8_t product_type;
	uint8_t reserved;
}/* [public,gensize] */;

union spoolss_PrinterData {
	const char * string;/* [flag(LIBNDR_FLAG_STR_NULLTERM|LIBNDR_FLAG_ALIGN2),case(REG_SZ)] */
	DATA_BLOB binary;/* [case(REG_BINARY),flag(LIBNDR_FLAG_REMAINING)] */
	uint32_t value;/* [case(REG_DWORD)] */
	const char ** string_array;/* [flag(LIBNDR_FLAG_STR_NULLTERM|LIBNDR_FLAG_ALIGN2),case(REG_MULTI_SZ)] */
	DATA_BLOB data;/* [flag(LIBNDR_FLAG_REMAINING),default] */
}/* [public,nodiscriminant] */;

enum spoolss_FormFlags
#ifndef USE_UINT_ENUMS
 {
	SPOOLSS_FORM_USER=(int)(0),
	SPOOLSS_FORM_BUILTIN=(int)(1),
	SPOOLSS_FORM_PRINTER=(int)(2)
}
#else
 { __donnot_use_enum_spoolss_FormFlags=0x7FFFFFFF}
#define SPOOLSS_FORM_USER ( 0 )
#define SPOOLSS_FORM_BUILTIN ( 1 )
#define SPOOLSS_FORM_PRINTER ( 2 )
#endif
;

struct spoolss_FormSize {
	uint32_t width;
	uint32_t height;
};

struct spoolss_FormArea {
	uint32_t left;
	uint32_t top;
	uint32_t right;
	uint32_t bottom;
};

struct spoolss_FormInfo1 {
	enum spoolss_FormFlags flags;
	const char * form_name;/* [flag(LIBNDR_FLAG_STR_NULLTERM|LIBNDR_FLAG_ALIGN2),relative] */
	struct spoolss_FormSize size;
	struct spoolss_FormArea area;
}/* [gensize,public] */;

/* bitmap spoolss_FormStringType */
#define SPOOLSS_FORM_STRING_TYPE_NONE ( 0x00000001 )
#define SPOOLSS_FORM_STRING_TYPE_MUI_DLL ( 0x00000002 )
#define SPOOLSS_FORM_STRING_TYPE_LANG_PAIR ( 0x00000004 )

struct spoolss_FormInfo2 {
	enum spoolss_FormFlags flags;
	const char * form_name;/* [flag(LIBNDR_FLAG_STR_NULLTERM|LIBNDR_FLAG_ALIGN2),relative] */
	struct spoolss_FormSize size;
	struct spoolss_FormArea area;
	const char * keyword;/* [flag(LIBNDR_FLAG_STR_ASCII|LIBNDR_FLAG_STR_NULLTERM),relative] */
	uint32_t string_type;
	const char * mui_dll;/* [flag(LIBNDR_FLAG_STR_NULLTERM|LIBNDR_FLAG_ALIGN2),relative] */
	uint32_t ressource_id;
	const char * display_name;/* [relative,flag(LIBNDR_FLAG_STR_NULLTERM|LIBNDR_FLAG_ALIGN2)] */
	uint16_t lang_id;
	uint16_t unused;
}/* [gensize,public] */;

union spoolss_FormInfo {
	struct spoolss_FormInfo1 info1;/* [case] */
	struct spoolss_FormInfo2 info2;/* [case(2)] */
}/* [public,relative_base,flag(LIBNDR_FLAG_RELATIVE_REVERSE),nodiscriminant,gensize] */;

struct spoolss_AddFormInfo1 {
	enum spoolss_FormFlags flags;
	const char *form_name;/* [unique,charset(UTF16)] */
	struct spoolss_FormSize size;
	struct spoolss_FormArea area;
};

struct spoolss_AddFormInfo2 {
	enum spoolss_FormFlags flags;
	const char *form_name;/* [unique,charset(UTF16)] */
	struct spoolss_FormSize size;
	struct spoolss_FormArea area;
	const char *keyword;/* [unique,charset(DOS)] */
	uint32_t string_type;
	const char *mui_dll;/* [unique,charset(UTF16)] */
	uint32_t ressource_id;
	const char *display_name;/* [unique,charset(UTF16)] */
	uint32_t lang_id;
};

union spoolss_AddFormInfo {
	struct spoolss_AddFormInfo1 *info1;/* [case,unique] */
	struct spoolss_AddFormInfo2 *info2;/* [unique,case(2)] */
}/* [switch_type(uint32)] */;

struct spoolss_PortInfo1 {
	const char * port_name;/* [flag(LIBNDR_FLAG_STR_NULLTERM|LIBNDR_FLAG_ALIGN2),relative] */
}/* [public,gensize] */;

/* bitmap spoolss_PortType */
#define SPOOLSS_PORT_TYPE_WRITE ( 0x00000001 )
#define SPOOLSS_PORT_TYPE_READ ( 0x00000002 )
#define SPOOLSS_PORT_TYPE_REDIRECTED ( 0x00000004 )
#define SPOOLSS_PORT_TYPE_NET_ATTACHED ( 0x00000008 )

struct spoolss_PortInfo2 {
	const char * port_name;/* [flag(LIBNDR_FLAG_STR_NULLTERM|LIBNDR_FLAG_ALIGN2),relative] */
	const char * monitor_name;/* [flag(LIBNDR_FLAG_STR_NULLTERM|LIBNDR_FLAG_ALIGN2),relative] */
	const char * description;/* [relative,flag(LIBNDR_FLAG_STR_NULLTERM|LIBNDR_FLAG_ALIGN2)] */
	uint32_t port_type;
	uint32_t reserved;
}/* [gensize,public] */;

enum spoolss_PortStatus
#ifndef USE_UINT_ENUMS
 {
	PORT_STATUS_CLEAR=(int)(0x00000000),
	PORT_STATUS_OFFLINE=(int)(0x00000001),
	PORT_STATUS_PAPER_JAM=(int)(0x00000002),
	PORT_STATUS_PAPER_OUT=(int)(0x00000003),
	PORT_STATUS_OUTPUT_BIN_FULL=(int)(0x00000004),
	PORT_STATUS_PAPER_PROBLEM=(int)(0x00000005),
	PORT_STATUS_NO_TONER=(int)(0x00000006),
	PORT_STATUS_DOOR_OPEN=(int)(0x00000007),
	PORT_STATUS_USER_INTERVENTION=(int)(0x00000008),
	PORT_STATUS_OUT_OF_MEMORY=(int)(0x00000009),
	PORT_STATUS_TONER_LOW=(int)(0x0000000A),
	PORT_STATUS_WARMING_UP=(int)(0x0000000B),
	PORT_STATUS_POWER_SAVE=(int)(0x0000000C)
}
#else
 { __donnot_use_enum_spoolss_PortStatus=0x7FFFFFFF}
#define PORT_STATUS_CLEAR ( 0x00000000 )
#define PORT_STATUS_OFFLINE ( 0x00000001 )
#define PORT_STATUS_PAPER_JAM ( 0x00000002 )
#define PORT_STATUS_PAPER_OUT ( 0x00000003 )
#define PORT_STATUS_OUTPUT_BIN_FULL ( 0x00000004 )
#define PORT_STATUS_PAPER_PROBLEM ( 0x00000005 )
#define PORT_STATUS_NO_TONER ( 0x00000006 )
#define PORT_STATUS_DOOR_OPEN ( 0x00000007 )
#define PORT_STATUS_USER_INTERVENTION ( 0x00000008 )
#define PORT_STATUS_OUT_OF_MEMORY ( 0x00000009 )
#define PORT_STATUS_TONER_LOW ( 0x0000000A )
#define PORT_STATUS_WARMING_UP ( 0x0000000B )
#define PORT_STATUS_POWER_SAVE ( 0x0000000C )
#endif
;

enum spoolss_PortSeverity
#ifndef USE_UINT_ENUMS
 {
	PORT_STATUS_TYPE_ERROR=(int)(0x00000001),
	PORT_STATUS_TYPE_WARNING=(int)(0x00000002),
	PORT_STATUS_TYPE_INFO=(int)(0x00000003)
}
#else
 { __donnot_use_enum_spoolss_PortSeverity=0x7FFFFFFF}
#define PORT_STATUS_TYPE_ERROR ( 0x00000001 )
#define PORT_STATUS_TYPE_WARNING ( 0x00000002 )
#define PORT_STATUS_TYPE_INFO ( 0x00000003 )
#endif
;

struct spoolss_PortInfo3 {
	enum spoolss_PortStatus status;
	const char * status_string;/* [flag(LIBNDR_FLAG_STR_NULLTERM|LIBNDR_FLAG_ALIGN2),relative] */
	enum spoolss_PortSeverity severity;
}/* [gensize,public] */;

struct spoolss_PortInfoFF {
	const char * port_name;/* [relative,flag(LIBNDR_FLAG_STR_NULLTERM|LIBNDR_FLAG_ALIGN2)] */
	DATA_BLOB monitor_data;
}/* [gensize,public] */;

union spoolss_PortInfo {
	struct spoolss_PortInfo1 info1;/* [case] */
	struct spoolss_PortInfo2 info2;/* [case(2)] */
	struct spoolss_PortInfo3 info3;/* [case(3)] */
	struct spoolss_PortInfoFF infoFF;/* [case(0xff)] */
}/* [nodiscriminant,relative_base,public,flag(LIBNDR_FLAG_RELATIVE_REVERSE)] */;

struct spoolss_MonitorInfo1 {
	const char * monitor_name;/* [flag(LIBNDR_FLAG_STR_NULLTERM|LIBNDR_FLAG_ALIGN2),relative] */
}/* [gensize,public] */;

struct spoolss_MonitorInfo2 {
	const char * monitor_name;/* [relative,flag(LIBNDR_FLAG_STR_NULLTERM|LIBNDR_FLAG_ALIGN2)] */
	const char * environment;/* [flag(LIBNDR_FLAG_STR_NULLTERM|LIBNDR_FLAG_ALIGN2),relative] */
	const char * dll_name;/* [flag(LIBNDR_FLAG_STR_NULLTERM|LIBNDR_FLAG_ALIGN2),relative] */
}/* [public,gensize] */;

union spoolss_MonitorInfo {
	struct spoolss_MonitorInfo1 info1;/* [case] */
	struct spoolss_MonitorInfo2 info2;/* [case(2)] */
}/* [flag(LIBNDR_FLAG_RELATIVE_REVERSE),relative_base,public,nodiscriminant] */;

struct spoolss_SetPortInfo1 {
	const char *port_name;/* [unique,charset(UTF16)] */
}/* [gensize,public] */;

struct spoolss_SetPortInfo2 {
	const char *port_name;/* [charset(UTF16),unique] */
	const char *monitor_name;/* [charset(UTF16),unique] */
	const char *description;/* [charset(UTF16),unique] */
	uint32_t port_type;
	uint32_t reserved;
}/* [public,gensize] */;

struct spoolss_SetPortInfo3 {
	enum spoolss_PortStatus status;
	const char *status_string;/* [charset(UTF16),unique] */
	enum spoolss_PortSeverity severity;
}/* [gensize,public] */;

struct spoolss_SetPortInfoFF {
	const char *port_name;/* [charset(UTF16),unique] */
	DATA_BLOB monitor_data;
}/* [public,gensize] */;

union spoolss_SetPortInfo {
	struct spoolss_SetPortInfo1 *info1;/* [case,unique] */
	struct spoolss_SetPortInfo2 *info2;/* [unique,case(2)] */
	struct spoolss_SetPortInfo3 *info3;/* [case(3),unique] */
	struct spoolss_SetPortInfoFF *infoFF;/* [case(0xff),unique] */
}/* [switch_type(uint32)] */;

struct spoolss_SetPortInfoContainer {
	uint32_t level;
	union spoolss_SetPrinterInfo info;/* [switch_is(level)] */
};

struct spoolss_PrintProcDataTypesInfo1 {
	const char * name_array;/* [flag(LIBNDR_FLAG_STR_NULLTERM|LIBNDR_FLAG_ALIGN2),relative] */
}/* [public,gensize] */;

union spoolss_PrintProcDataTypesInfo {
	struct spoolss_PrintProcDataTypesInfo1 info1;/* [case] */
}/* [nodiscriminant,public,relative_base,flag(LIBNDR_FLAG_RELATIVE_REVERSE)] */;

/* bitmap spoolss_PrinterChangeFlags */
#define PRINTER_CHANGE_ADD_PRINTER ( 0x00000001 )
#define PRINTER_CHANGE_SET_PRINTER ( 0x00000002 )
#define PRINTER_CHANGE_DELETE_PRINTER ( 0x00000004 )
#define PRINTER_CHANGE_FAILED_CONNECTION_PRINTER ( 0x00000008 )
#define PRINTER_CHANGE_ADD_JOB ( 0x00000100 )
#define PRINTER_CHANGE_SET_JOB ( 0x00000200 )
#define PRINTER_CHANGE_DELETE_JOB ( 0x00000400 )
#define PRINTER_CHANGE_WRITE_JOB ( 0x00000800 )
#define PRINTER_CHANGE_ADD_FORM ( 0x00010000 )
#define PRINTER_CHANGE_SET_FORM ( 0x00020000 )
#define PRINTER_CHANGE_DELETE_FORM ( 0x00040000 )
#define PRINTER_CHANGE_ADD_PORT ( 0x00100000 )
#define PRINTER_CHANGE_CONFIGURE_PORT ( 0x00200000 )
#define PRINTER_CHANGE_DELETE_PORT ( 0x00400000 )
#define PRINTER_CHANGE_ADD_PRINT_PROCESSOR ( 0x01000000 )
#define PRINTER_CHANGE_DELETE_PRINT_PROCESSOR ( 0x04000000 )
#define PRINTER_CHANGE_SERVER ( 0x08000000 )
#define PRINTER_CHANGE_ADD_PRINTER_DRIVER ( 0x10000000 )
#define PRINTER_CHANGE_SET_PRINTER_DRIVER ( 0x20000000 )
#define PRINTER_CHANGE_DELETE_PRINTER_DRIVER ( 0x40000000 )
#define PRINTER_CHANGE_TIMEOUT ( 0x80000000 )

struct spoolss_PortVarContainer {
	uint32_t monitor_data_size;
	uint8_t *monitor_data;/* [unique,size_is(monitor_data_size)] */
};

enum spoolss_JobNotifyField
#ifndef USE_UINT_ENUMS
 {
	JOB_NOTIFY_FIELD_PRINTER_NAME=(int)(0x00),
	JOB_NOTIFY_FIELD_MACHINE_NAME=(int)(0x01),
	JOB_NOTIFY_FIELD_PORT_NAME=(int)(0x02),
	JOB_NOTIFY_FIELD_USER_NAME=(int)(0x03),
	JOB_NOTIFY_FIELD_NOTIFY_NAME=(int)(0x04),
	JOB_NOTIFY_FIELD_DATATYPE=(int)(0x05),
	JOB_NOTIFY_FIELD_PRINT_PROCESSOR=(int)(0x06),
	JOB_NOTIFY_FIELD_PARAMETERS=(int)(0x07),
	JOB_NOTIFY_FIELD_DRIVER_NAME=(int)(0x08),
	JOB_NOTIFY_FIELD_DEVMODE=(int)(0x09),
	JOB_NOTIFY_FIELD_STATUS=(int)(0x0a),
	JOB_NOTIFY_FIELD_STATUS_STRING=(int)(0x0b),
	JOB_NOTIFY_FIELD_SECURITY_DESCRIPTOR=(int)(0x0c),
	JOB_NOTIFY_FIELD_DOCUMENT=(int)(0x0d),
	JOB_NOTIFY_FIELD_PRIORITY=(int)(0x0e),
	JOB_NOTIFY_FIELD_POSITION=(int)(0x0f),
	JOB_NOTIFY_FIELD_SUBMITTED=(int)(0x10),
	JOB_NOTIFY_FIELD_START_TIME=(int)(0x11),
	JOB_NOTIFY_FIELD_UNTIL_TIME=(int)(0x12),
	JOB_NOTIFY_FIELD_TIME=(int)(0x13),
	JOB_NOTIFY_FIELD_TOTAL_PAGES=(int)(0x14),
	JOB_NOTIFY_FIELD_PAGES_PRINTED=(int)(0x15),
	JOB_NOTIFY_FIELD_TOTAL_BYTES=(int)(0x16),
	JOB_NOTIFY_FIELD_BYTES_PRINTED=(int)(0x17)
}
#else
 { __donnot_use_enum_spoolss_JobNotifyField=0x7FFFFFFF}
#define JOB_NOTIFY_FIELD_PRINTER_NAME ( 0x00 )
#define JOB_NOTIFY_FIELD_MACHINE_NAME ( 0x01 )
#define JOB_NOTIFY_FIELD_PORT_NAME ( 0x02 )
#define JOB_NOTIFY_FIELD_USER_NAME ( 0x03 )
#define JOB_NOTIFY_FIELD_NOTIFY_NAME ( 0x04 )
#define JOB_NOTIFY_FIELD_DATATYPE ( 0x05 )
#define JOB_NOTIFY_FIELD_PRINT_PROCESSOR ( 0x06 )
#define JOB_NOTIFY_FIELD_PARAMETERS ( 0x07 )
#define JOB_NOTIFY_FIELD_DRIVER_NAME ( 0x08 )
#define JOB_NOTIFY_FIELD_DEVMODE ( 0x09 )
#define JOB_NOTIFY_FIELD_STATUS ( 0x0a )
#define JOB_NOTIFY_FIELD_STATUS_STRING ( 0x0b )
#define JOB_NOTIFY_FIELD_SECURITY_DESCRIPTOR ( 0x0c )
#define JOB_NOTIFY_FIELD_DOCUMENT ( 0x0d )
#define JOB_NOTIFY_FIELD_PRIORITY ( 0x0e )
#define JOB_NOTIFY_FIELD_POSITION ( 0x0f )
#define JOB_NOTIFY_FIELD_SUBMITTED ( 0x10 )
#define JOB_NOTIFY_FIELD_START_TIME ( 0x11 )
#define JOB_NOTIFY_FIELD_UNTIL_TIME ( 0x12 )
#define JOB_NOTIFY_FIELD_TIME ( 0x13 )
#define JOB_NOTIFY_FIELD_TOTAL_PAGES ( 0x14 )
#define JOB_NOTIFY_FIELD_PAGES_PRINTED ( 0x15 )
#define JOB_NOTIFY_FIELD_TOTAL_BYTES ( 0x16 )
#define JOB_NOTIFY_FIELD_BYTES_PRINTED ( 0x17 )
#endif
;

enum spoolss_PrintNotifyField
#ifndef USE_UINT_ENUMS
 {
	PRINTER_NOTIFY_FIELD_SERVER_NAME=(int)(0x00),
	PRINTER_NOTIFY_FIELD_PRINTER_NAME=(int)(0x01),
	PRINTER_NOTIFY_FIELD_SHARE_NAME=(int)(0x02),
	PRINTER_NOTIFY_FIELD_PORT_NAME=(int)(0x03),
	PRINTER_NOTIFY_FIELD_DRIVER_NAME=(int)(0x04),
	PRINTER_NOTIFY_FIELD_COMMENT=(int)(0x05),
	PRINTER_NOTIFY_FIELD_LOCATION=(int)(0x06),
	PRINTER_NOTIFY_FIELD_DEVMODE=(int)(0x07),
	PRINTER_NOTIFY_FIELD_SEPFILE=(int)(0x08),
	PRINTER_NOTIFY_FIELD_PRINT_PROCESSOR=(int)(0x09),
	PRINTER_NOTIFY_FIELD_PARAMETERS=(int)(0x0a),
	PRINTER_NOTIFY_FIELD_DATATYPE=(int)(0x0b),
	PRINTER_NOTIFY_FIELD_SECURITY_DESCRIPTOR=(int)(0x0c),
	PRINTER_NOTIFY_FIELD_ATTRIBUTES=(int)(0x0d),
	PRINTER_NOTIFY_FIELD_PRIORITY=(int)(0x0e),
	PRINTER_NOTIFY_FIELD_DEFAULT_PRIORITY=(int)(0x0f),
	PRINTER_NOTIFY_FIELD_START_TIME=(int)(0x10),
	PRINTER_NOTIFY_FIELD_UNTIL_TIME=(int)(0x11),
	PRINTER_NOTIFY_FIELD_STATUS=(int)(0x12),
	PRINTER_NOTIFY_FIELD_STATUS_STRING=(int)(0x13),
	PRINTER_NOTIFY_FIELD_CJOBS=(int)(0x14),
	PRINTER_NOTIFY_FIELD_AVERAGE_PPM=(int)(0x15),
	PRINTER_NOTIFY_FIELD_TOTAL_PAGES=(int)(0x16),
	PRINTER_NOTIFY_FIELD_PAGES_PRINTED=(int)(0x17),
	PRINTER_NOTIFY_FIELD_TOTAL_BYTES=(int)(0x18),
	PRINTER_NOTIFY_FIELD_BYTES_PRINTED=(int)(0x19),
	PRINTER_NOTIFY_FIELD_OBJECT_GUID=(int)(0x1a),
	PRINTER_NOTIFY_FIELD_FRIENDLY_NAME=(int)(0x1b)
}
#else
 { __donnot_use_enum_spoolss_PrintNotifyField=0x7FFFFFFF}
#define PRINTER_NOTIFY_FIELD_SERVER_NAME ( 0x00 )
#define PRINTER_NOTIFY_FIELD_PRINTER_NAME ( 0x01 )
#define PRINTER_NOTIFY_FIELD_SHARE_NAME ( 0x02 )
#define PRINTER_NOTIFY_FIELD_PORT_NAME ( 0x03 )
#define PRINTER_NOTIFY_FIELD_DRIVER_NAME ( 0x04 )
#define PRINTER_NOTIFY_FIELD_COMMENT ( 0x05 )
#define PRINTER_NOTIFY_FIELD_LOCATION ( 0x06 )
#define PRINTER_NOTIFY_FIELD_DEVMODE ( 0x07 )
#define PRINTER_NOTIFY_FIELD_SEPFILE ( 0x08 )
#define PRINTER_NOTIFY_FIELD_PRINT_PROCESSOR ( 0x09 )
#define PRINTER_NOTIFY_FIELD_PARAMETERS ( 0x0a )
#define PRINTER_NOTIFY_FIELD_DATATYPE ( 0x0b )
#define PRINTER_NOTIFY_FIELD_SECURITY_DESCRIPTOR ( 0x0c )
#define PRINTER_NOTIFY_FIELD_ATTRIBUTES ( 0x0d )
#define PRINTER_NOTIFY_FIELD_PRIORITY ( 0x0e )
#define PRINTER_NOTIFY_FIELD_DEFAULT_PRIORITY ( 0x0f )
#define PRINTER_NOTIFY_FIELD_START_TIME ( 0x10 )
#define PRINTER_NOTIFY_FIELD_UNTIL_TIME ( 0x11 )
#define PRINTER_NOTIFY_FIELD_STATUS ( 0x12 )
#define PRINTER_NOTIFY_FIELD_STATUS_STRING ( 0x13 )
#define PRINTER_NOTIFY_FIELD_CJOBS ( 0x14 )
#define PRINTER_NOTIFY_FIELD_AVERAGE_PPM ( 0x15 )
#define PRINTER_NOTIFY_FIELD_TOTAL_PAGES ( 0x16 )
#define PRINTER_NOTIFY_FIELD_PAGES_PRINTED ( 0x17 )
#define PRINTER_NOTIFY_FIELD_TOTAL_BYTES ( 0x18 )
#define PRINTER_NOTIFY_FIELD_BYTES_PRINTED ( 0x19 )
#define PRINTER_NOTIFY_FIELD_OBJECT_GUID ( 0x1a )
#define PRINTER_NOTIFY_FIELD_FRIENDLY_NAME ( 0x1b )
#endif
;

enum spoolss_NotifyType
#ifndef USE_UINT_ENUMS
 {
	PRINTER_NOTIFY_TYPE=(int)(0x00),
	JOB_NOTIFY_TYPE=(int)(0x01)
}
#else
 { __donnot_use_enum_spoolss_NotifyType=0x7FFFFFFF}
#define PRINTER_NOTIFY_TYPE ( 0x00 )
#define JOB_NOTIFY_TYPE ( 0x01 )
#endif
;

union spoolss_Field {
	uint16_t field;/* [case(PRINTER_NOTIFY_TYPE)] */
}/* [noprint,nodiscriminant] */;

struct spoolss_NotifyOptionType {
	enum spoolss_NotifyType type;
	uint16_t u1;
	uint32_t u2;
	uint32_t u3;
	uint32_t count;
	union spoolss_Field *fields;/* [unique,size_is(count),switch_is(type)] */
};

/* bitmap spoolssNotifyOptionFlags */
#define PRINTER_NOTIFY_OPTIONS_REFRESH ( 0x00000001 )

struct spoolss_NotifyOption {
	uint32_t version;/* [value(2)] */
	uint32_t flags;
	uint32_t count;
	struct spoolss_NotifyOptionType *types;/* [unique,size_is(count)] */
};

struct spoolss_NotifyString {
	uint32_t size;
	const char *string;/* [size_is(size/2),unique,charset(UTF16)] */
};

enum spoolss_NotifyTable
#ifndef USE_UINT_ENUMS
 {
	NOTIFY_TABLE_DWORD=(int)(0x0001),
	NOTIFY_TABLE_STRING=(int)(0x0002),
	NOTIFY_TABLE_DEVMODE=(int)(0x0003),
	NOTIFY_TABLE_TIME=(int)(0x0004),
	NOTIFY_TABLE_SECURITYDESCRIPTOR=(int)(0x0005)
}
#else
 { __donnot_use_enum_spoolss_NotifyTable=0x7FFFFFFF}
#define NOTIFY_TABLE_DWORD ( 0x0001 )
#define NOTIFY_TABLE_STRING ( 0x0002 )
#define NOTIFY_TABLE_DEVMODE ( 0x0003 )
#define NOTIFY_TABLE_TIME ( 0x0004 )
#define NOTIFY_TABLE_SECURITYDESCRIPTOR ( 0x0005 )
#endif
;

union spoolss_NotifyData {
	uint32_t integer[2];/* [case] */
	struct spoolss_NotifyString string;/* [case(2)] */
	struct spoolss_DevmodeContainer devmode;/* [case(3)] */
	struct spoolss_TimeCtr time;/* [case(4)] */
	struct sec_desc_buf sd;/* [case(5)] */
}/* [switch_type(uint32)] */;

struct spoolss_Notify {
	enum spoolss_NotifyType type;
	union spoolss_Field field;/* [switch_is(type)] */
	enum spoolss_NotifyTable variable_type;
	uint32_t job_id;
	union spoolss_NotifyData data;/* [switch_is(variable_type)] */
};

struct spoolss_NotifyInfo {
	uint32_t version;/* [value(2)] */
	uint32_t flags;
	uint32_t count;
	struct spoolss_Notify *notifies;/* [size_is(count)] */
};

union spoolss_ReplyPrinterInfo {
	struct spoolss_NotifyInfo *info0;/* [unique,case(0)] */
}/* [switch_type(uint32)] */;

/* bitmap spoolss_PrinterNotifyFlags */
#define PRINTER_NOTIFY_INFO_DISCARDED ( 0x00000001 )
#define PRINTER_NOTIFY_INFO_DISCARDNOTED ( 0x00010000 )
#define PRINTER_NOTIFY_INFO_COLOR_MISMATCH ( 0x00080000 )

struct spoolss_UserLevel1 {
	uint32_t size;
	const char *client;/* [unique,charset(UTF16)] */
	const char *user;/* [unique,charset(UTF16)] */
	uint32_t build;
	enum spoolss_MajorVersion major;
	enum spoolss_MinorVersion minor;
	enum spoolss_ProcessorArchitecture processor;
};

struct spoolss_UserLevel2 {
	uint32_t not_used;
};

struct spoolss_UserLevel3 {
	uint32_t size;
	uint32_t flags;
	uint32_t size2;
	const char *client;/* [unique,charset(UTF16)] */
	const char *user;/* [unique,charset(UTF16)] */
	uint32_t build;
	enum spoolss_MajorVersion major;
	enum spoolss_MinorVersion minor;
	enum spoolss_ProcessorArchitecture processor;
	uint64_t reserved;
};

union spoolss_UserLevel {
	struct spoolss_UserLevel1 *level1;/* [case,unique] */
	struct spoolss_UserLevel2 *level2;/* [unique,case(2)] */
	struct spoolss_UserLevel3 *level3;/* [case(3),unique] */
}/* [switch_type(uint32)] */;

struct spoolss_UserLevelCtr {
	uint32_t level;
	union spoolss_UserLevel user_info;/* [switch_is(level)] */
};

/* bitmap spoolss_AccessRights */
#define SERVER_ACCESS_ADMINISTER ( 0x00000001 )
#define SERVER_ACCESS_ENUMERATE ( 0x00000002 )
#define PRINTER_ACCESS_ADMINISTER ( 0x00000004 )
#define PRINTER_ACCESS_USE ( 0x00000008 )
#define JOB_ACCESS_ADMINISTER ( 0x00000010 )
#define JOB_ACCESS_READ ( 0x00000020 )

struct spoolss_PrinterEnumValues {
	const char * value_name;/* [relative,flag(LIBNDR_FLAG_STR_NULLTERM|LIBNDR_FLAG_ALIGN2)] */
	uint32_t value_name_len;/* [value(2*strlen_m_term(value_name))] */
	enum winreg_Type type;
	DATA_BLOB *data;/* [relative,subcontext_size(data_length),subcontext(0),flag(LIBNDR_FLAG_REMAINING|ndr_spoolss_PrinterEnumValues_align(r->type))] */
	uint32_t data_length;/* [value(data?data->length:0)] */
}/* [gensize,relative_base,public] */;

union spoolss_KeyNames {
	const char ** string_array;/* [flag(LIBNDR_FLAG_STR_NULLTERM|LIBNDR_FLAG_ALIGN2),default] */
}/* [nodiscriminant] */;

/* bitmap spoolss_DeleteDriverFlags */
#define DPD_DELETE_UNUSED_FILES ( 0x00000001 )
#define DPD_DELETE_SPECIFIC_VERSION ( 0x00000002 )
#define DPD_DELETE_ALL_FILES ( 0x00000004 )

enum spoolss_PortProtocol
#ifndef USE_UINT_ENUMS
 {
	PROTOCOL_RAWTCP_TYPE=(int)(1),
	PROTOCOL_LPR_TYPE=(int)(2)
}
#else
 { __donnot_use_enum_spoolss_PortProtocol=0x7FFFFFFF}
#define PROTOCOL_RAWTCP_TYPE ( 1 )
#define PROTOCOL_LPR_TYPE ( 2 )
#endif
;

struct spoolss_PortData1 {
	const char *portname;/* [charset(UTF16)] */
	uint32_t version;/* [value(0x00000001)] */
	enum spoolss_PortProtocol protocol;
	uint32_t size;/* [value(sizeof(r))] */
	uint32_t reserved;
	const char *hostaddress;/* [charset(UTF16)] */
	const char *snmpcommunity;/* [charset(UTF16)] */
	uint32_t dblspool;
	const char *queue;/* [charset(UTF16)] */
	const char *ip_address;/* [charset(UTF16)] */
	const char *hardware_address;/* [charset(UTF16)] */
	const char *device_type;/* [charset(UTF16)] */
	uint32_t port_number;
	uint32_t snmp_enabled;
	uint32_t snmp_dev_index;
}/* [public] */;

struct spoolss_PortData2 {
	const char *portname;/* [charset(UTF16)] */
	uint32_t version;/* [value(0x00000002)] */
	enum spoolss_PortProtocol protocol;
	uint32_t size;/* [value(sizeof(r))] */
	uint32_t reserved;
	const char *hostaddress;/* [charset(UTF16)] */
	const char *snmpcommunity;/* [charset(UTF16)] */
	uint32_t dblspool;
	const char *queue;/* [charset(UTF16)] */
	const char *device_type;/* [charset(UTF16)] */
	uint32_t port_number;
	uint32_t snmp_enabled;
	uint32_t snmp_dev_index;
	uint32_t port_monitor_mib_index;
}/* [public] */;

struct spoolss_MonitorUi {
	const char * dll_name;/* [flag(LIBNDR_FLAG_STR_NULLTERM|LIBNDR_FLAG_ALIGN2)] */
}/* [public] */;

/* bitmap spoolss_AddPrinterDriverExFlags */
#define APD_STRICT_UPGRADE ( 0x00000001 )
#define APD_STRICT_DOWNGRADE ( 0x00000002 )
#define APD_COPY_ALL_FILES ( 0x00000004 )
#define APD_COPY_NEW_FILES ( 0x00000008 )
#define APD_COPY_FROM_DIRECTORY ( 0x00000010 )
#define APD_DONT_COPY_FILES_TO_CLUSTER ( 0x00001000 )
#define APD_COPY_TO_ALL_SPOOLERS ( 0x00002000 )
#define APD_RETURN_BLOCKING_STATUS_CODE ( 0x00010000 )

struct spoolss_CorePrinterDriver {
	struct GUID core_driver_guid;
	NTTIME driver_date;
	uint64_t driver_version;
	const char *formname;/* [charset(UTF8)] */
};


struct _spoolss_EnumPrinters {
	struct {
		uint32_t flags;
		const char *server;/* [unique,charset(UTF16)] */
		uint32_t level;
		DATA_BLOB *buffer;/* [unique] */
		uint32_t offered;
	} in;

	struct {
		DATA_BLOB *info;/* [unique] */
		uint32_t *needed;/* [ref] */
		uint32_t *count;/* [ref] */
		WERROR result;
	} out;

};


struct __spoolss_EnumPrinters {
	struct {
		uint32_t level;
		uint32_t count;
	} in;

	struct {
		union spoolss_PrinterInfo *info;/* [switch_is(level)] */
	} out;

};


struct spoolss_EnumPrinters {
	struct {
		uint32_t flags;
		const char *server;/* [unique,charset(UTF16)] */
		uint32_t level;
		DATA_BLOB *buffer;/* [unique] */
		uint32_t offered;
	} in;

	struct {
		uint32_t *count;/* [ref] */
		union spoolss_PrinterInfo **info;/* [switch_is(level),size_is(,*count),ref] */
		uint32_t *needed;/* [ref] */
		WERROR result;
	} out;

};


struct spoolss_OpenPrinter {
	struct {
		const char *printername;/* [charset(UTF16),unique] */
		const char *datatype;/* [unique,charset(UTF16)] */
		struct spoolss_DevmodeContainer devmode_ctr;
		uint32_t access_mask;
	} in;

	struct {
		struct policy_handle *handle;/* [ref] */
		WERROR result;
	} out;

};


struct spoolss_SetJob {
	struct {
		struct policy_handle *handle;/* [ref] */
		uint32_t job_id;
		struct spoolss_JobInfoContainer *ctr;/* [unique] */
		enum spoolss_JobControl command;
	} in;

	struct {
		WERROR result;
	} out;

};


struct spoolss_GetJob {
	struct {
		struct policy_handle *handle;/* [ref] */
		uint32_t job_id;
		uint32_t level;
		DATA_BLOB *buffer;/* [unique] */
		uint32_t offered;
	} in;

	struct {
		union spoolss_JobInfo *info;/* [subcontext_size(offered),switch_is(level),subcontext(4),unique] */
		uint32_t *needed;/* [ref] */
		WERROR result;
	} out;

};


struct _spoolss_EnumJobs {
	struct {
		struct policy_handle *handle;/* [ref] */
		uint32_t firstjob;
		uint32_t numjobs;
		uint32_t level;
		DATA_BLOB *buffer;/* [unique] */
		uint32_t offered;
	} in;

	struct {
		DATA_BLOB *info;/* [unique] */
		uint32_t *needed;/* [ref] */
		uint32_t *count;/* [ref] */
		WERROR result;
	} out;

};


struct __spoolss_EnumJobs {
	struct {
		uint32_t level;
		uint32_t count;
	} in;

	struct {
		union spoolss_JobInfo *info;/* [switch_is(level)] */
	} out;

};


struct spoolss_EnumJobs {
	struct {
		struct policy_handle *handle;/* [ref] */
		uint32_t firstjob;
		uint32_t numjobs;
		uint32_t level;
		DATA_BLOB *buffer;/* [unique] */
		uint32_t offered;
	} in;

	struct {
		uint32_t *count;/* [ref] */
		union spoolss_JobInfo **info;/* [switch_is(level),size_is(,*count),ref] */
		uint32_t *needed;/* [ref] */
		WERROR result;
	} out;

};


struct spoolss_AddPrinter {
	struct {
		const char *server;/* [unique,charset(UTF16)] */
		struct spoolss_SetPrinterInfoCtr *info_ctr;/* [ref] */
		struct spoolss_DevmodeContainer *devmode_ctr;/* [ref] */
		struct sec_desc_buf *secdesc_ctr;/* [ref] */
	} in;

	struct {
		struct policy_handle *handle;/* [ref] */
		WERROR result;
	} out;

};


struct spoolss_DeletePrinter {
	struct {
		struct policy_handle *handle;/* [ref] */
	} in;

	struct {
		WERROR result;
	} out;

};


struct spoolss_SetPrinter {
	struct {
		struct policy_handle *handle;/* [ref] */
		struct spoolss_SetPrinterInfoCtr *info_ctr;/* [ref] */
		struct spoolss_DevmodeContainer *devmode_ctr;/* [ref] */
		struct sec_desc_buf *secdesc_ctr;/* [ref] */
		enum spoolss_PrinterControl command;
	} in;

	struct {
		WERROR result;
	} out;

};


struct spoolss_GetPrinter {
	struct {
		struct policy_handle *handle;/* [ref] */
		uint32_t level;
		DATA_BLOB *buffer;/* [unique] */
		uint32_t offered;
	} in;

	struct {
		union spoolss_PrinterInfo *info;/* [unique,subcontext_size(offered),switch_is(level),subcontext(4)] */
		uint32_t *needed;/* [ref] */
		WERROR result;
	} out;

};


struct spoolss_AddPrinterDriver {
	struct {
		const char *servername;/* [unique,charset(UTF16)] */
		struct spoolss_AddDriverInfoCtr *info_ctr;/* [ref] */
	} in;

	struct {
		WERROR result;
	} out;

};


struct _spoolss_EnumPrinterDrivers {
	struct {
		const char *server;/* [charset(UTF16),unique] */
		const char *environment;/* [charset(UTF16),unique] */
		uint32_t level;
		DATA_BLOB *buffer;/* [unique] */
		uint32_t offered;
	} in;

	struct {
		DATA_BLOB *info;/* [unique] */
		uint32_t *needed;/* [ref] */
		uint32_t *count;/* [ref] */
		WERROR result;
	} out;

};


struct __spoolss_EnumPrinterDrivers {
	struct {
		uint32_t level;
		uint32_t count;
	} in;

	struct {
		union spoolss_DriverInfo *info;/* [switch_is(level)] */
	} out;

};


struct spoolss_EnumPrinterDrivers {
	struct {
		const char *server;/* [charset(UTF16),unique] */
		const char *environment;/* [unique,charset(UTF16)] */
		uint32_t level;
		DATA_BLOB *buffer;/* [unique] */
		uint32_t offered;
	} in;

	struct {
		uint32_t *count;/* [ref] */
		union spoolss_DriverInfo **info;/* [switch_is(level),ref,size_is(,*count)] */
		uint32_t *needed;/* [ref] */
		WERROR result;
	} out;

};


struct spoolss_GetPrinterDriver {
	struct {
		struct policy_handle *handle;/* [ref] */
		const char *architecture;/* [unique,charset(UTF16)] */
		uint32_t level;
		DATA_BLOB *buffer;/* [unique] */
		uint32_t offered;
	} in;

	struct {
		union spoolss_DriverInfo *info;/* [subcontext_size(offered),switch_is(level),subcontext(4),unique] */
		uint32_t *needed;/* [ref] */
		WERROR result;
	} out;

};


struct spoolss_GetPrinterDriverDirectory {
	struct {
		const char *server;/* [charset(UTF16),unique] */
		const char *environment;/* [charset(UTF16),unique] */
		uint32_t level;
		DATA_BLOB *buffer;/* [unique] */
		uint32_t offered;
	} in;

	struct {
		union spoolss_DriverDirectoryInfo *info;/* [unique,subcontext(4),switch_is(level),subcontext_size(offered)] */
		uint32_t *needed;/* [ref] */
		WERROR result;
	} out;

};


struct spoolss_DeletePrinterDriver {
	struct {
		const char *server;/* [charset(UTF16),unique] */
		const char *architecture;/* [charset(UTF16)] */
		const char *driver;/* [charset(UTF16)] */
	} in;

	struct {
		WERROR result;
	} out;

};


struct spoolss_AddPrintProcessor {
	struct {
		const char *server;/* [charset(UTF16),unique] */
		const char *architecture;/* [charset(UTF16)] */
		const char *path_name;/* [charset(UTF16)] */
		const char *print_processor_name;/* [charset(UTF16)] */
	} in;

	struct {
		WERROR result;
	} out;

};


struct _spoolss_EnumPrintProcessors {
	struct {
		const char *servername;/* [unique,charset(UTF16)] */
		const char *environment;/* [unique,charset(UTF16)] */
		uint32_t level;
		DATA_BLOB *buffer;/* [unique] */
		uint32_t offered;
	} in;

	struct {
		DATA_BLOB *info;/* [unique] */
		uint32_t *needed;/* [ref] */
		uint32_t *count;/* [ref] */
		WERROR result;
	} out;

};


struct __spoolss_EnumPrintProcessors {
	struct {
		uint32_t level;
		uint32_t count;
	} in;

	struct {
		union spoolss_PrintProcessorInfo *info;/* [switch_is(level)] */
	} out;

};


struct spoolss_EnumPrintProcessors {
	struct {
		const char *servername;/* [unique,charset(UTF16)] */
		const char *environment;/* [unique,charset(UTF16)] */
		uint32_t level;
		DATA_BLOB *buffer;/* [unique] */
		uint32_t offered;
	} in;

	struct {
		uint32_t *count;/* [ref] */
		union spoolss_PrintProcessorInfo **info;/* [switch_is(level),size_is(,*count),ref] */
		uint32_t *needed;/* [ref] */
		WERROR result;
	} out;

};


struct spoolss_GetPrintProcessorDirectory {
	struct {
		const char *server;/* [unique,charset(UTF16)] */
		const char *environment;/* [unique,charset(UTF16)] */
		uint32_t level;
		DATA_BLOB *buffer;/* [unique] */
		uint32_t offered;
	} in;

	struct {
		union spoolss_PrintProcessorDirectoryInfo *info;/* [subcontext(4),switch_is(level),subcontext_size(offered),unique] */
		uint32_t *needed;/* [ref] */
		WERROR result;
	} out;

};


struct spoolss_StartDocPrinter {
	struct {
		struct policy_handle *handle;/* [ref] */
		uint32_t level;
		union spoolss_DocumentInfo info;/* [switch_is(level)] */
	} in;

	struct {
		uint32_t *job_id;/* [ref] */
		WERROR result;
	} out;

};


struct spoolss_StartPagePrinter {
	struct {
		struct policy_handle *handle;/* [ref] */
	} in;

	struct {
		WERROR result;
	} out;

};


struct spoolss_WritePrinter {
	struct {
		struct policy_handle *handle;/* [ref] */
		DATA_BLOB data;
		uint32_t _data_size;/* [value(r->in.data.length)] */
	} in;

	struct {
		uint32_t *num_written;/* [ref] */
		WERROR result;
	} out;

};


struct spoolss_EndPagePrinter {
	struct {
		struct policy_handle *handle;/* [ref] */
	} in;

	struct {
		WERROR result;
	} out;

};


struct spoolss_AbortPrinter {
	struct {
		struct policy_handle *handle;/* [ref] */
	} in;

	struct {
		WERROR result;
	} out;

};


struct spoolss_ReadPrinter {
	struct {
		struct policy_handle *handle;/* [ref] */
		uint32_t data_size;
	} in;

	struct {
		uint8_t *data;/* [ref,size_is(data_size)] */
		uint32_t *_data_size;/* [ref] */
		WERROR result;
	} out;

};


struct spoolss_EndDocPrinter {
	struct {
		struct policy_handle *handle;/* [ref] */
	} in;

	struct {
		WERROR result;
	} out;

};


struct spoolss_AddJob {
	struct {
		struct policy_handle *handle;/* [ref] */
		uint32_t level;
		uint32_t offered;
		uint8_t *buffer;/* [size_is(offered),unique] */
	} in;

	struct {
		uint32_t *needed;/* [ref] */
		uint8_t *buffer;/* [size_is(offered),unique] */
		WERROR result;
	} out;

};


struct spoolss_ScheduleJob {
	struct {
		struct policy_handle *handle;/* [ref] */
		uint32_t jobid;
	} in;

	struct {
		WERROR result;
	} out;

};


struct spoolss_GetPrinterData {
	struct {
		struct policy_handle *handle;/* [ref] */
		const char *value_name;/* [charset(UTF16)] */
		uint32_t offered;
	} in;

	struct {
		enum winreg_Type *type;/* [ref] */
		uint8_t *data;/* [size_is(offered),ref] */
		uint32_t *needed;/* [ref] */
		WERROR result;
	} out;

};


struct spoolss_SetPrinterData {
	struct {
		struct policy_handle *handle;/* [ref] */
		const char *value_name;/* [charset(UTF16)] */
		enum winreg_Type type;
		uint8_t *data;/* [size_is(offered),ref] */
		uint32_t offered;
	} in;

	struct {
		WERROR result;
	} out;

};


struct spoolss_WaitForPrinterChange {
	struct {
		WERROR result;
	} out;

};


struct spoolss_ClosePrinter {
	struct {
		struct policy_handle *handle;/* [ref] */
	} in;

	struct {
		struct policy_handle *handle;/* [ref] */
		WERROR result;
	} out;

};


struct spoolss_AddForm {
	struct {
		struct policy_handle *handle;/* [ref] */
		uint32_t level;
		union spoolss_AddFormInfo info;/* [switch_is(level)] */
	} in;

	struct {
		WERROR result;
	} out;

};


struct spoolss_DeleteForm {
	struct {
		struct policy_handle *handle;/* [ref] */
		const char *form_name;/* [charset(UTF16)] */
	} in;

	struct {
		WERROR result;
	} out;

};


struct spoolss_GetForm {
	struct {
		struct policy_handle *handle;/* [ref] */
		const char *form_name;/* [charset(UTF16)] */
		uint32_t level;
		DATA_BLOB *buffer;/* [unique] */
		uint32_t offered;
	} in;

	struct {
		union spoolss_FormInfo *info;/* [unique,subcontext_size(offered),subcontext(4),switch_is(level)] */
		uint32_t *needed;/* [ref] */
		WERROR result;
	} out;

};


struct spoolss_SetForm {
	struct {
		struct policy_handle *handle;/* [ref] */
		const char *form_name;/* [charset(UTF16)] */
		uint32_t level;
		union spoolss_AddFormInfo info;/* [switch_is(level)] */
	} in;

	struct {
		WERROR result;
	} out;

};


struct _spoolss_EnumForms {
	struct {
		struct policy_handle *handle;/* [ref] */
		uint32_t level;
		DATA_BLOB *buffer;/* [unique] */
		uint32_t offered;
	} in;

	struct {
		DATA_BLOB *info;/* [unique] */
		uint32_t *needed;/* [ref] */
		uint32_t *count;/* [ref] */
		WERROR result;
	} out;

};


struct __spoolss_EnumForms {
	struct {
		uint32_t level;
		uint32_t count;
	} in;

	struct {
		union spoolss_FormInfo *info;/* [switch_is(level)] */
	} out;

};


struct spoolss_EnumForms {
	struct {
		struct policy_handle *handle;/* [ref] */
		uint32_t level;
		DATA_BLOB *buffer;/* [unique] */
		uint32_t offered;
	} in;

	struct {
		uint32_t *count;/* [ref] */
		union spoolss_FormInfo **info;/* [ref,size_is(,*count),switch_is(level)] */
		uint32_t *needed;/* [ref] */
		WERROR result;
	} out;

};


struct _spoolss_EnumPorts {
	struct {
		const char *servername;/* [unique,charset(UTF16)] */
		uint32_t level;
		DATA_BLOB *buffer;/* [unique] */
		uint32_t offered;
	} in;

	struct {
		DATA_BLOB *info;/* [unique] */
		uint32_t *needed;/* [ref] */
		uint32_t *count;/* [ref] */
		WERROR result;
	} out;

};


struct __spoolss_EnumPorts {
	struct {
		uint32_t level;
		uint32_t count;
	} in;

	struct {
		union spoolss_PortInfo *info;/* [switch_is(level)] */
	} out;

};


struct spoolss_EnumPorts {
	struct {
		const char *servername;/* [unique,charset(UTF16)] */
		uint32_t level;
		DATA_BLOB *buffer;/* [unique] */
		uint32_t offered;
	} in;

	struct {
		uint32_t *count;/* [ref] */
		union spoolss_PortInfo **info;/* [size_is(,*count),ref,switch_is(level)] */
		uint32_t *needed;/* [ref] */
		WERROR result;
	} out;

};


struct _spoolss_EnumMonitors {
	struct {
		const char *servername;/* [charset(UTF16),unique] */
		uint32_t level;
		DATA_BLOB *buffer;/* [unique] */
		uint32_t offered;
	} in;

	struct {
		DATA_BLOB *info;/* [unique] */
		uint32_t *needed;/* [ref] */
		uint32_t *count;/* [ref] */
		WERROR result;
	} out;

};


struct __spoolss_EnumMonitors {
	struct {
		uint32_t level;
		uint32_t count;
	} in;

	struct {
		union spoolss_MonitorInfo *info;/* [switch_is(level)] */
	} out;

};


struct spoolss_EnumMonitors {
	struct {
		const char *servername;/* [unique,charset(UTF16)] */
		uint32_t level;
		DATA_BLOB *buffer;/* [unique] */
		uint32_t offered;
	} in;

	struct {
		uint32_t *count;/* [ref] */
		union spoolss_MonitorInfo **info;/* [size_is(,*count),ref,switch_is(level)] */
		uint32_t *needed;/* [ref] */
		WERROR result;
	} out;

};


struct spoolss_AddPort {
	struct {
		const char *server_name;/* [unique,charset(UTF16)] */
		uint32_t unknown;
		const char *monitor_name;/* [charset(UTF16)] */
	} in;

	struct {
		WERROR result;
	} out;

};


struct spoolss_ConfigurePort {
	struct {
		WERROR result;
	} out;

};


struct spoolss_DeletePort {
	struct {
		const char *server_name;/* [unique,charset(UTF16)] */
		uint32_t ptr;
		const char *port_name;/* [charset(UTF16),ref] */
	} in;

	struct {
		WERROR result;
	} out;

};


struct spoolss_CreatePrinterIC {
	struct {
		struct policy_handle *handle;/* [ref] */
		struct spoolss_DevmodeContainer *devmode_ctr;/* [ref] */
	} in;

	struct {
		struct policy_handle *gdi_handle;/* [ref] */
		WERROR result;
	} out;

};


struct spoolss_PlayGDIScriptOnPrinterIC {
	struct {
		WERROR result;
	} out;

};


struct spoolss_DeletePrinterIC {
	struct {
		struct policy_handle *gdi_handle;/* [ref] */
	} in;

	struct {
		struct policy_handle *gdi_handle;/* [ref] */
		WERROR result;
	} out;

};


struct spoolss_AddPrinterConnection {
	struct {
		WERROR result;
	} out;

};


struct spoolss_DeletePrinterConnection {
	struct {
		WERROR result;
	} out;

};


struct spoolss_PrinterMessageBox {
	struct {
		WERROR result;
	} out;

};


struct spoolss_AddMonitor {
	struct {
		WERROR result;
	} out;

};


struct spoolss_DeleteMonitor {
	struct {
		WERROR result;
	} out;

};


struct spoolss_DeletePrintProcessor {
	struct {
		WERROR result;
	} out;

};


struct spoolss_AddPrintProvidor {
	struct {
		WERROR result;
	} out;

};


struct spoolss_DeletePrintProvidor {
	struct {
		WERROR result;
	} out;

};


struct _spoolss_EnumPrintProcDataTypes {
	struct {
		const char *servername;/* [charset(UTF16),unique] */
		const char *print_processor_name;/* [charset(UTF16),unique] */
		uint32_t level;
		DATA_BLOB *buffer;/* [unique] */
		uint32_t offered;
	} in;

	struct {
		DATA_BLOB *info;/* [unique] */
		uint32_t *needed;/* [ref] */
		uint32_t *count;/* [ref] */
		WERROR result;
	} out;

};


struct __spoolss_EnumPrintProcDataTypes {
	struct {
		uint32_t level;
		uint32_t count;
	} in;

	struct {
		union spoolss_PrintProcDataTypesInfo *info;/* [switch_is(level)] */
	} out;

};


struct spoolss_EnumPrintProcDataTypes {
	struct {
		const char *servername;/* [unique,charset(UTF16)] */
		const char *print_processor_name;/* [charset(UTF16),unique] */
		uint32_t level;
		DATA_BLOB *buffer;/* [unique] */
		uint32_t offered;
	} in;

	struct {
		uint32_t *count;/* [ref] */
		union spoolss_PrintProcDataTypesInfo **info;/* [switch_is(level),ref,size_is(,*count)] */
		uint32_t *needed;/* [ref] */
		WERROR result;
	} out;

};


struct spoolss_ResetPrinter {
	struct {
		struct policy_handle *handle;/* [ref] */
		const char *data_type;/* [charset(UTF16),unique] */
		struct spoolss_DevmodeContainer *devmode_ctr;/* [ref] */
	} in;

	struct {
		WERROR result;
	} out;

};


struct spoolss_GetPrinterDriver2 {
	struct {
		struct policy_handle *handle;/* [ref] */
		const char *architecture;/* [charset(UTF16),unique] */
		uint32_t level;
		DATA_BLOB *buffer;/* [unique] */
		uint32_t offered;
		uint32_t client_major_version;
		uint32_t client_minor_version;
	} in;

	struct {
		union spoolss_DriverInfo *info;/* [switch_is(level),subcontext(4),subcontext_size(offered),unique] */
		uint32_t *needed;/* [ref] */
		uint32_t *server_major_version;/* [ref] */
		uint32_t *server_minor_version;/* [ref] */
		WERROR result;
	} out;

};


struct spoolss_FindFirstPrinterChangeNotification {
	struct {
		WERROR result;
	} out;

};


struct spoolss_FindNextPrinterChangeNotification {
	struct {
		WERROR result;
	} out;

};


struct spoolss_FindClosePrinterNotify {
	struct {
		struct policy_handle *handle;/* [ref] */
	} in;

	struct {
		WERROR result;
	} out;

};


struct spoolss_RouterFindFirstPrinterChangeNotificationOld {
	struct {
		WERROR result;
	} out;

};


struct spoolss_ReplyOpenPrinter {
	struct {
		const char *server_name;/* [charset(UTF16)] */
		uint32_t printer_local;
		enum winreg_Type type;
		uint32_t bufsize;/* [range(0,512)] */
		uint8_t *buffer;/* [unique,size_is(bufsize)] */
	} in;

	struct {
		struct policy_handle *handle;/* [ref] */
		WERROR result;
	} out;

};


struct spoolss_RouterReplyPrinter {
	struct {
		struct policy_handle *handle;/* [ref] */
		uint32_t flags;
		uint32_t bufsize;/* [range(0,512)] */
		uint8_t *buffer;/* [unique,size_is(bufsize)] */
	} in;

	struct {
		WERROR result;
	} out;

};


struct spoolss_ReplyClosePrinter {
	struct {
		struct policy_handle *handle;/* [ref] */
	} in;

	struct {
		struct policy_handle *handle;/* [ref] */
		WERROR result;
	} out;

};


struct spoolss_AddPortEx {
	struct {
		const char *servername;/* [charset(UTF16),unique] */
		struct spoolss_SetPortInfoContainer *port_ctr;/* [ref] */
		struct spoolss_PortVarContainer *port_var_ctr;/* [ref] */
		const char *monitor_name;/* [charset(UTF16),unique] */
	} in;

	struct {
		WERROR result;
	} out;

};


struct spoolss_RouterFindFirstPrinterChangeNotification {
	struct {
		WERROR result;
	} out;

};


struct spoolss_SpoolerInit {
	struct {
		WERROR result;
	} out;

};


struct spoolss_ResetPrinterEx {
	struct {
		WERROR result;
	} out;

};


struct spoolss_RemoteFindFirstPrinterChangeNotifyEx {
	struct {
		struct policy_handle *handle;/* [ref] */
		uint32_t flags;
		uint32_t options;
		const char *local_machine;/* [charset(UTF16),unique] */
		uint32_t printer_local;
		struct spoolss_NotifyOption *notify_options;/* [unique] */
	} in;

	struct {
		WERROR result;
	} out;

};


struct spoolss_RouterReplyPrinterEx {
	struct {
		struct policy_handle *handle;/* [ref] */
		uint32_t color;
		uint32_t flags;
		uint32_t reply_type;
		union spoolss_ReplyPrinterInfo info;/* [switch_is(reply_type)] */
	} in;

	struct {
		uint32_t *reply_result;/* [ref] */
		WERROR result;
	} out;

};


struct spoolss_RouterRefreshPrinterChangeNotify {
	struct {
		struct policy_handle *handle;/* [ref] */
		uint32_t change_low;
		struct spoolss_NotifyOption *options;/* [unique] */
	} in;

	struct {
		struct spoolss_NotifyInfo **info;/* [ref] */
		WERROR result;
	} out;

};


struct spoolss_44 {
	struct {
		WERROR result;
	} out;

};


struct spoolss_OpenPrinterEx {
	struct {
		const char *printername;/* [charset(UTF16),unique] */
		const char *datatype;/* [charset(UTF16),unique] */
		struct spoolss_DevmodeContainer devmode_ctr;
		uint32_t access_mask;
		uint32_t level;
		union spoolss_UserLevel userlevel;/* [switch_is(level)] */
	} in;

	struct {
		struct policy_handle *handle;/* [ref] */
		WERROR result;
	} out;

};


struct spoolss_AddPrinterEx {
	struct {
		const char *server;/* [charset(UTF16),unique] */
		struct spoolss_SetPrinterInfoCtr *info_ctr;/* [ref] */
		struct spoolss_DevmodeContainer *devmode_ctr;/* [ref] */
		struct sec_desc_buf *secdesc_ctr;/* [ref] */
		struct spoolss_UserLevelCtr *userlevel_ctr;/* [ref] */
	} in;

	struct {
		struct policy_handle *handle;/* [ref] */
		WERROR result;
	} out;

};


struct spoolss_SetPort {
	struct {
		const char *servername;/* [charset(UTF16),unique] */
		const char *port_name;/* [unique,charset(UTF16)] */
		struct spoolss_SetPortInfoContainer *port_ctr;/* [ref] */
	} in;

	struct {
		WERROR result;
	} out;

};


struct spoolss_EnumPrinterData {
	struct {
		struct policy_handle *handle;/* [ref] */
		uint32_t enum_index;
		uint32_t value_offered;
		uint32_t data_offered;
	} in;

	struct {
		const char *value_name;/* [size_is(value_offered/2),charset(UTF16)] */
		uint32_t *value_needed;/* [ref] */
		enum winreg_Type *type;/* [ref] */
		uint8_t *data;/* [ref,flag(LIBNDR_PRINT_ARRAY_HEX),size_is(data_offered)] */
		uint32_t *data_needed;/* [ref] */
		WERROR result;
	} out;

};


struct spoolss_DeletePrinterData {
	struct {
		struct policy_handle *handle;/* [ref] */
		const char *value_name;/* [charset(UTF16)] */
	} in;

	struct {
		WERROR result;
	} out;

};


struct spoolss_4a {
	struct {
		WERROR result;
	} out;

};


struct spoolss_4b {
	struct {
		WERROR result;
	} out;

};


struct spoolss_4c {
	struct {
		WERROR result;
	} out;

};


struct spoolss_SetPrinterDataEx {
	struct {
		struct policy_handle *handle;/* [ref] */
		const char *key_name;/* [charset(UTF16)] */
		const char *value_name;/* [charset(UTF16)] */
		enum winreg_Type type;
		uint8_t *data;/* [size_is(offered),ref] */
		uint32_t offered;
	} in;

	struct {
		WERROR result;
	} out;

};


struct spoolss_GetPrinterDataEx {
	struct {
		struct policy_handle *handle;/* [ref] */
		const char *key_name;/* [charset(UTF16)] */
		const char *value_name;/* [charset(UTF16)] */
		uint32_t offered;
	} in;

	struct {
		enum winreg_Type *type;/* [ref] */
		uint8_t *data;/* [size_is(offered),ref] */
		uint32_t *needed;/* [ref] */
		WERROR result;
	} out;

};


struct _spoolss_EnumPrinterDataEx {
	struct {
		struct policy_handle *handle;/* [ref] */
		const char *key_name;/* [charset(UTF16)] */
		uint32_t offered;
	} in;

	struct {
		DATA_BLOB info;
		uint32_t *needed;/* [ref] */
		uint32_t *count;/* [ref] */
		WERROR result;
	} out;

};


struct __spoolss_EnumPrinterDataEx {
	struct {
		uint32_t count;
	} in;

	struct {
		struct spoolss_PrinterEnumValues *info;
	} out;

};


struct spoolss_EnumPrinterDataEx {
	struct {
		struct policy_handle *handle;/* [ref] */
		const char *key_name;/* [charset(UTF16)] */
		uint32_t offered;
	} in;

	struct {
		uint32_t *count;/* [ref] */
		struct spoolss_PrinterEnumValues **info;/* [ref,size_is(,*count)] */
		uint32_t *needed;/* [ref] */
		WERROR result;
	} out;

};


struct spoolss_EnumPrinterKey {
	struct {
		struct policy_handle *handle;/* [ref] */
		const char *key_name;/* [charset(UTF16)] */
		uint32_t offered;
	} in;

	struct {
		uint32_t *_ndr_size;/* [ref] */
		union spoolss_KeyNames *key_buffer;/* [ref,subcontext_size(*_ndr_size*2),switch_is(*_ndr_size),subcontext(0)] */
		uint32_t *needed;/* [ref] */
		WERROR result;
	} out;

};


struct spoolss_DeletePrinterDataEx {
	struct {
		struct policy_handle *handle;/* [ref] */
		const char *key_name;/* [charset(UTF16)] */
		const char *value_name;/* [charset(UTF16)] */
	} in;

	struct {
		WERROR result;
	} out;

};


struct spoolss_DeletePrinterKey {
	struct {
		struct policy_handle *handle;/* [ref] */
		const char *key_name;/* [charset(UTF16)] */
	} in;

	struct {
		WERROR result;
	} out;

};


struct spoolss_53 {
	struct {
		WERROR result;
	} out;

};


struct spoolss_DeletePrinterDriverEx {
	struct {
		const char *server;/* [unique,charset(UTF16)] */
		const char *architecture;/* [charset(UTF16)] */
		const char *driver;/* [charset(UTF16)] */
		uint32_t delete_flags;
		uint32_t version;
	} in;

	struct {
		WERROR result;
	} out;

};


struct spoolss_AddPerMachineConnection {
	struct {
		const char *server;/* [unique,charset(UTF16)] */
		const char *printername;/* [charset(UTF16),ref] */
		const char *printserver;/* [charset(UTF16),ref] */
		const char *provider;/* [charset(UTF16),ref] */
	} in;

	struct {
		WERROR result;
	} out;

};


struct spoolss_DeletePerMachineConnection {
	struct {
		const char *server;/* [unique,charset(UTF16)] */
		const char *printername;/* [charset(UTF16),ref] */
	} in;

	struct {
		WERROR result;
	} out;

};


struct spoolss_EnumPerMachineConnections {
	struct {
		WERROR result;
	} out;

};


struct spoolss_XcvData {
	struct {
		struct policy_handle *handle;/* [ref] */
		const char *function_name;/* [charset(UTF16)] */
		DATA_BLOB in_data;
		uint32_t _in_data_length;/* [value(r->in.in_data.length)] */
		uint32_t out_data_size;
		uint32_t *status_code;/* [ref] */
	} in;

	struct {
		uint8_t *out_data;/* [ref,size_is(out_data_size)] */
		uint32_t *needed;/* [ref] */
		uint32_t *status_code;/* [ref] */
		WERROR result;
	} out;

};


struct spoolss_AddPrinterDriverEx {
	struct {
		const char *servername;/* [charset(UTF16),unique] */
		struct spoolss_AddDriverInfoCtr *info_ctr;/* [ref] */
		uint32_t flags;
	} in;

	struct {
		WERROR result;
	} out;

};


struct spoolss_5a {
	struct {
		WERROR result;
	} out;

};


struct spoolss_5b {
	struct {
		WERROR result;
	} out;

};


struct spoolss_5c {
	struct {
		WERROR result;
	} out;

};


struct spoolss_5d {
	struct {
		WERROR result;
	} out;

};


struct spoolss_5e {
	struct {
		WERROR result;
	} out;

};


struct spoolss_5f {
	struct {
		WERROR result;
	} out;

};


struct spoolss_60 {
	struct {
		WERROR result;
	} out;

};


struct spoolss_61 {
	struct {
		WERROR result;
	} out;

};


struct spoolss_62 {
	struct {
		WERROR result;
	} out;

};


struct spoolss_63 {
	struct {
		WERROR result;
	} out;

};


struct spoolss_64 {
	struct {
		WERROR result;
	} out;

};


struct spoolss_65 {
	struct {
		WERROR result;
	} out;

};


struct spoolss_GetCorePrinterDrivers {
	struct {
		const char *servername;/* [unique,charset(UTF16)] */
		const char *architecture;/* [ref,charset(UTF16)] */
		uint32_t core_driver_size;
		const char *core_driver_dependencies;/* [charset(UTF16),ref,size_is(core_driver_size)] */
		uint32_t core_printer_driver_count;
	} in;

	struct {
		struct spoolss_CorePrinterDriver *core_printer_drivers;/* [ref,size_is(core_printer_driver_count)] */
		WERROR result;
	} out;

};


struct spoolss_67 {
	struct {
		WERROR result;
	} out;

};


struct spoolss_GetPrinterDriverPackagePath {
	struct {
		const char *servername;/* [charset(UTF16),unique] */
		const char *architecture;/* [ref,charset(UTF16)] */
		const char *language;/* [unique,charset(UTF16)] */
		const char *package_id;/* [ref,charset(UTF16)] */
		uint32_t driver_package_cab_size;
		const char *driver_package_cab;/* [unique,size_is(driver_package_cab_size),charset(UTF16)] */
	} in;

	struct {
		uint32_t *required;/* [ref] */
		const char *driver_package_cab;/* [unique,size_is(driver_package_cab_size),charset(UTF16)] */
		WERROR result;
	} out;

};


struct spoolss_69 {
	struct {
		WERROR result;
	} out;

};


struct spoolss_6a {
	struct {
		WERROR result;
	} out;

};


struct spoolss_6b {
	struct {
		WERROR result;
	} out;

};


struct spoolss_6c {
	struct {
		WERROR result;
	} out;

};


struct spoolss_6d {
	struct {
		WERROR result;
	} out;

};

#endif /* _HEADER_spoolss */
#endif /* _PIDL_HEADER_spoolss */
