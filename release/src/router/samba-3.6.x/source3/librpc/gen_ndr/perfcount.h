/* header auto-generated by pidl */

#ifndef _PIDL_HEADER_perfcount
#define _PIDL_HEADER_perfcount

#include <stdint.h>

#include "libcli/util/ntstatus.h"

#ifndef _HEADER_perfcount
#define _HEADER_perfcount

#define PERF_NO_INSTANCES	( -1 )
#define PERF_NO_UNIQUE_ID	( -1 )
#define PERF_SIZE_DWORD	( 0x00000000 )
#define PERF_SIZE_LARGE	( 0x00000100 )
#define PERF_SIZE_ZERO	( 0x00000200 )
#define PERF_SIZE_VARIABLE_LEN	( 0x00000300 )
#define PERF_TYPE_NUMBER	( 0x00000000 )
#define PERF_TYPE_COUNTER	( 0x00000400 )
#define PERF_TYPE_TEXT	( 0x00000800 )
#define PERF_TYPE_ZERO	( 0x00000C00 )
#define PERF_NUMBER_HEX	( 0x00000000 )
#define PERF_NUMBER_DECIMAL	( 0x00010000 )
#define PERF_NUMBER_DEC_1000	( 0x00020000 )
#define PERF_COUNTER_VALUE	( 0x00000000 )
#define PERF_COUNTER_RATE	( 0x00010000 )
#define PERF_COUNTER_FRACTION	( 0x00020000 )
#define PERF_COUNTER_BASE	( 0x00030000 )
#define PERF_COUNTER_ELAPSED	( 0x00040000 )
#define PERF_COUNTER_QUEUELEN	( 0x00050000 )
#define PERF_COUNTER_HISTOGRAM	( 0x00060000 )
#define PERF_COUNTER_PRECISION	( 0x00070000 )
#define PERF_TEXT_UNICODE	( 0x00000000 )
#define PERF_TEXT_ASCII	( 0x00010000 )
#define PERF_TIMER_TICK	( 0x00000000 )
#define PERF_TIMER_100NS	( 0x00100000 )
#define PERF_OBJECT_TIMER	( 0x00200000 )
#define PERF_DELTA_COUNTER	( 0x00400000 )
#define PERF_DELTA_BASE	( 0x00800000 )
#define PERF_INVERSE_COUNTER	( 0x01000000 )
#define PERF_MULTI_COUNTER	( 0x02000000 )
#define PERF_DISPLAY_NO_SUFFIX	( 0x00000000 )
#define PERF_DISPLAY_PER_SEC	( 0x10000000 )
#define PERF_DISPLAY_PERCENT	( 0x20000000 )
#define PERF_DISPLAY_SECONDS	( 0x30000000 )
#define PERF_DISPLAY_NOSHOW	( 0x40000000 )
#define PERF_DETAIL_NOVICE	( 100 )
#define PERF_DETAIL_ADVANCED	( 200 )
#define PERF_DETAIL_EXPERT	( 300 )
#define PERF_DETAIL_WIZARD	( 400 )
struct SYSTEMTIME {
	uint16_t year;
	uint16_t month;
	uint16_t dayofweek;
	uint16_t day;
	uint16_t hour;
	uint16_t minute;
	uint16_t second;
	uint16_t milliseconds;
};

struct PERF_COUNTER_DEFINITION {
	uint32_t ByteLength;
	uint32_t CounterNameTitleIndex;
	uint32_t CounterNameTitlePointer;
	uint32_t CounterHelpTitleIndex;
	uint32_t CounterHelpTitlePointer;
	uint32_t DefaultScale;
	uint32_t DetailLevel;
	uint32_t CounterType;
	uint32_t CounterSize;
	uint32_t CounterOffset;
}/* [public] */;

struct PERF_COUNTER_BLOCK {
	uint32_t ByteLength;
	uint8_t *data;
}/* [public] */;

struct PERF_INSTANCE_DEFINITION {
	uint32_t ByteLength;
	uint32_t ParentObjectTitleIndex;
	uint32_t ParentObjectTitlePointer;
	uint32_t UniqueID;
	uint32_t NameOffset;
	uint32_t NameLength;
	uint8_t *data;/* [unique] */
	struct PERF_COUNTER_BLOCK counter_data;
}/* [public] */;

struct PERF_OBJECT_TYPE {
	uint32_t TotalByteLength;
	uint32_t DefinitionLength;
	uint32_t HeaderLength;
	uint32_t ObjectNameTitleIndex;
	uint32_t ObjectNameTitlePointer;
	uint32_t ObjectHelpTitleIndex;
	uint32_t ObjectHelpTitlePointer;
	uint32_t DetailLevel;
	uint32_t NumCounters;
	uint32_t DefaultCounter;
	uint32_t NumInstances;
	uint32_t CodePage;
	uint64_t PerfTime;
	uint64_t PerfFreq;
	struct PERF_COUNTER_DEFINITION *counters;
	struct PERF_INSTANCE_DEFINITION *instances;
	struct PERF_COUNTER_BLOCK counter_data;
}/* [public] */;

struct PERF_DATA_BLOCK {
	uint16_t Signature[4];
	uint32_t LittleEndian;
	uint32_t Version;
	uint32_t Revision;
	uint32_t TotalByteLength;
	uint32_t HeaderLength;
	uint32_t NumObjectTypes;
	uint32_t DefaultObject;
	struct SYSTEMTIME SystemTime;
	uint32_t Padding;
	uint64_t PerfTime;
	uint64_t PerfFreq;
	uint64_t PerfTime100nSec;
	uint32_t SystemNameLength;
	uint32_t SystemNameOffset;
	uint8_t *data;/* [unique] */
	struct PERF_OBJECT_TYPE *objects;
}/* [public] */;

#endif /* _HEADER_perfcount */
#endif /* _PIDL_HEADER_perfcount */
