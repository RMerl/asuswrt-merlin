# add valgrind suppressions for the build farm here. Get the format
# from the build farm log

{
   samba_dlopen1
   Memcheck:Cond
   obj:/lib/ld-2.3.6.so
   obj:/lib/ld-2.3.6.so
   obj:/lib/tls/libc-2.3.6.so
   obj:/lib/ld-2.3.6.so
   fun:_dl_open
}

{
   samba_dlopen2
   Memcheck:Cond
   obj:/lib/ld-2.3.6.so
   fun:_dl_open
}

{
   samba_dlopen3
   Memcheck:Addr4
   obj:/lib/ld-2.3.6.so
   obj:/lib/ld-2.3.6.so
   obj:/lib/ld-2.3.6.so
   obj:/lib/ld-2.3.6.so
   obj:/lib/ld-2.3.6.so
   obj:/lib/ld-2.3.6.so
   obj:/lib/tls/libc-2.3.6.so
   obj:/lib/ld-2.3.6.so
   fun:_dl_open
}

{
   samba_dlopen4
   Memcheck:Cond
   obj:/lib/ld-2.3.6.so
   obj:/lib/tls/libc-2.3.6.so
   obj:/lib/ld-2.3.6.so
   fun:_dl_open
 }

{
   samba_dlopen5
   Memcheck:Addr4
   obj:/lib/ld-2.3.6.so
   obj:/lib/ld-2.3.6.so
   obj:/lib/ld-2.3.6.so
   obj:/lib/tls/libc-2.3.6.so
   obj:/lib/ld-2.3.6.so
   fun:_dl_open
}

{
   samba_dlopen6
   Memcheck:Cond
   obj:/lib/ld-2.3.6.so
   obj:/lib/ld-2.3.6.so
   obj:/lib/ld-2.3.6.so
   obj:/lib/tls/libc-2.3.6.so
   obj:/lib/ld-2.3.6.so
   fun:_dl_open
}

{
   samba_dlopen7
   Memcheck:Addr4
   obj:/lib/ld-2.3.6.so
   obj:/lib/ld-2.3.6.so
   obj:/lib/tls/libc-2.3.6.so
   obj:/lib/ld-2.3.6.so
   fun:_dl_open
}						

{
   samba_libc_dlsym1
   Memcheck:Addr4
   obj:/lib/ld-2.3.6.so
   obj:/lib/ld-2.3.6.so
   obj:/lib/ld-2.3.6.so
   obj:/lib/tls/libc-2.3.6.so
   obj:/lib/ld-2.3.6.so
   fun:__libc_dlsym
}

#
# Tests from valgrind-python.supp (distributed with python):
# 
# These try and suppress these errors
#

# all tool names: Addrcheck,Memcheck,cachegrind,helgrind,massif
{
   ADDRESS_IN_RANGE/Invalid read of size 4
   Memcheck:Addr4
   fun:Py_ADDRESS_IN_RANGE
}

{
   ADDRESS_IN_RANGE/Invalid read of size 4
   Memcheck:Value4
   fun:Py_ADDRESS_IN_RANGE
}

{
   ADDRESS_IN_RANGE/Invalid read of size 8 (x86_64 aka amd64)
   Memcheck:Value8
   fun:Py_ADDRESS_IN_RANGE
}

{
   ADDRESS_IN_RANGE/Conditional jump or move depends on uninitialised value
   Memcheck:Cond
   fun:Py_ADDRESS_IN_RANGE
}

#
# Leaks (including possible leaks)
#    Hmmm, I wonder if this masks some real leaks.  I think it does.
#    Will need to fix that.
#

{
   Handle PyMalloc confusing valgrind (possibly leaked)
   Memcheck:Leak
   fun:realloc
   fun:_PyObject_GC_Resize
   fun:COMMENT_THIS_LINE_TO_DISABLE_LEAK_WARNING
}

{
   Handle PyMalloc confusing valgrind (possibly leaked)
   Memcheck:Leak
   fun:malloc
   fun:_PyObject_GC_New
   fun:COMMENT_THIS_LINE_TO_DISABLE_LEAK_WARNING
}

{
   Handle PyMalloc confusing valgrind (possibly leaked)
   Memcheck:Leak
   fun:malloc
   fun:_PyObject_GC_NewVar
   fun:COMMENT_THIS_LINE_TO_DISABLE_LEAK_WARNING
}

