LIBMNL_1.0 {
global:
  mnl_attr_get_len;
  mnl_attr_get_payload;
  mnl_attr_get_payload_len;
  mnl_attr_get_str;
  mnl_attr_get_type;
  mnl_attr_get_u16;
  mnl_attr_get_u32;
  mnl_attr_get_u64;
  mnl_attr_get_u8;
  mnl_attr_nest_end;
  mnl_attr_nest_start;
  mnl_attr_nest_start_check;
  mnl_attr_nest_cancel;
  mnl_attr_next;
  mnl_attr_ok;
  mnl_attr_parse;
  mnl_attr_parse_nested;
  mnl_attr_put;
  mnl_attr_put_str;
  mnl_attr_put_strz;
  mnl_attr_put_u16;
  mnl_attr_put_u32;
  mnl_attr_put_u64;
  mnl_attr_put_u8;
  mnl_attr_put_check;
  mnl_attr_put_str_check;
  mnl_attr_put_strz_check;
  mnl_attr_put_u16_check;
  mnl_attr_put_u32_check;
  mnl_attr_put_u64_check;
  mnl_attr_put_u8_check;
  mnl_attr_type_valid;
  mnl_attr_validate;
  mnl_attr_validate2;
  mnl_cb_run;
  mnl_cb_run2;
  mnl_nlmsg_fprintf;
  mnl_nlmsg_get_payload;
  mnl_nlmsg_get_payload_len;
  mnl_nlmsg_get_payload_offset;
  mnl_nlmsg_get_payload_tail;
  mnl_nlmsg_next;
  mnl_nlmsg_ok;
  mnl_nlmsg_portid_ok;
  mnl_nlmsg_put_extra_header;
  mnl_nlmsg_put_header;
  mnl_nlmsg_seq_ok;
  mnl_nlmsg_size;
  mnl_nlmsg_batch_start;
  mnl_nlmsg_batch_stop;
  mnl_nlmsg_batch_next;
  mnl_nlmsg_batch_size;
  mnl_nlmsg_batch_reset;
  mnl_nlmsg_batch_current;
  mnl_nlmsg_batch_head;
  mnl_nlmsg_batch_is_empty;
  mnl_socket_bind;
  mnl_socket_close;
  mnl_socket_get_fd;
  mnl_socket_get_portid;
  mnl_socket_getsockopt;
  mnl_socket_open;
  mnl_socket_recvfrom;
  mnl_socket_sendto;
  mnl_socket_setsockopt;

local: *;
};

LIBMNL_1.1 {
  mnl_attr_parse_payload;
} LIBMNL_1.0;
