<refentry id="vidioc-enum-framesizes">

  <refmeta>
    <refentrytitle>ioctl VIDIOC_ENUM_FRAMESIZES</refentrytitle>
    &manvol;
  </refmeta>

  <refnamediv>
    <refname>VIDIOC_ENUM_FRAMESIZES</refname>
    <refpurpose>Enumerate frame sizes</refpurpose>
  </refnamediv>

  <refsynopsisdiv>
    <funcsynopsis>
      <funcprototype>
	<funcdef>int <function>ioctl</function></funcdef>
	<paramdef>int <parameter>fd</parameter></paramdef>
	<paramdef>int <parameter>request</parameter></paramdef>
	<paramdef>struct v4l2_frmsizeenum *<parameter>argp</parameter></paramdef>
      </funcprototype>
    </funcsynopsis>
  </refsynopsisdiv>

  <refsect1>
    <title>Arguments</title>

    <variablelist>
      <varlistentry>
	<term><parameter>fd</parameter></term>
	<listitem>
	  <para>&fd;</para>
	</listitem>
      </varlistentry>
      <varlistentry>
	<term><parameter>request</parameter></term>
	<listitem>
	  <para>VIDIOC_ENUM_FRAMESIZES</para>
	</listitem>
      </varlistentry>
      <varlistentry>
	<term><parameter>argp</parameter></term>
	<listitem>
	  <para>Pointer to a &v4l2-frmsizeenum; that contains an index
and pixel format and receives a frame width and height.</para>
	</listitem>
      </varlistentry>
    </variablelist>
  </refsect1>

  <refsect1>
    <title>Description</title>

    <note>
      <title>Experimental</title>

      <para>This is an <link linkend="experimental">experimental</link>
interface and may change in the future.</para>
    </note>

    <para>This ioctl allows applications to enumerate all frame sizes
(&ie; width and height in pixels) that the device supports for the
given pixel format.</para>
    <para>The supported pixel formats can be obtained by using the
&VIDIOC-ENUM-FMT; function.</para>
    <para>The return value and the content of the
<structfield>v4l2_frmsizeenum.type</structfield> field depend on the
type of frame sizes the device supports. Here are the semantics of the
function for the different cases:</para>

    <itemizedlist>
      <listitem>
	<para><emphasis role="bold">Discrete:</emphasis> The function
returns success if the given index value (zero-based) is valid. The
application should increase the index by one for each call until
<constant>EINVAL</constant> is returned. The
<structfield>v4l2_frmsizeenum.type</structfield> field is set to
<constant>V4L2_FRMSIZE_TYPE_DISCRETE</constant> by the driver. Of the
union only the <structfield>discrete</structfield> member is
valid.</para>
      </listitem>
      <listitem>
	<para><emphasis role="bold">Step-wise:</emphasis> The function
returns success if the given index value is zero and
<constant>EINVAL</constant> for any other index value. The
<structfield>v4l2_frmsizeenum.type</structfield> field is set to
<constant>V4L2_FRMSIZE_TYPE_STEPWISE</constant> by the driver. Of the
union only the <structfield>stepwise</structfield> member is
valid.</para>
      </listitem>
      <listitem>
	<para><emphasis role="bold">Continuous:</emphasis> This is a
special case of the step-wise type above. The function returns success
if the given index value is zero and <constant>EINVAL</constant> for
any other index value. The
<structfield>v4l2_frmsizeenum.type</structfield> field is set to
<constant>V4L2_FRMSIZE_TYPE_CONTINUOUS</constant> by the driver. Of
the union only the <structfield>stepwise</structfield> member is valid
and the <structfield>step_width</structfield> and
<structfield>step_height</structfield> values are set to 1.</para>
      </listitem>
    </itemizedlist>

    <para>When the application calls the function with index zero, it
must check the <structfield>type</structfield> field to determine the
type of frame size enumeration the device supports. Only for the
<constant>V4L2_FRMSIZE_TYPE_DISCRETE</constant> type does it make
sense to increase the index value to receive more frame sizes.</para>
    <para>Note that the order in which the frame sizes are returned
has no special meaning. In particular does it not say anything about
potential default format sizes.</para>
    <para>Applications can assume that the enumeration data does not
change without any interaction from the application itself. This means
that the enumeration data is consistent if the application does not
perform any other ioctl calls while it runs the frame size
enumeration.</para>
  </refsect1>

  <refsect1>
    <title>Structs</title>

    <para>In the structs below, <emphasis>IN</emphasis> denotes a
value that has to be filled in by the application,
<emphasis>OUT</emphasis> denotes values that the driver fills in. The
application should zero out all members except for the
<emphasis>IN</emphasis> fields.</para>

    <table pgwide="1" frame="none" id="v4l2-frmsize-discrete">
      <title>struct <structname>v4l2_frmsize_discrete</structname></title>
      <tgroup cols="3">
	&cs-str;
	<tbody valign="top">
	  <row>
	    <entry>__u32</entry>
	    <entry><structfield>width</structfield></entry>
	    <entry>Width of the frame [pixel].</entry>
	  </row>
	  <row>
	    <entry>__u32</entry>
	    <entry><structfield>height</structfield></entry>
	    <entry>Height of the frame [pixel].</entry>
	  </row>
	</tbody>
      </tgroup>
    </table>

    <table pgwide="1" frame="none" id="v4l2-frmsize-stepwise">
      <title>struct <structname>v4l2_frmsize_stepwise</structname></title>
      <tgroup cols="3">
	&cs-str;
	<tbody valign="top">
	  <row>
	    <entry>__u32</entry>
	    <entry><structfield>min_width</structfield></entry>
	    <entry>Minimum frame width [pixel].</entry>
	  </row>
	  <row>
	    <entry>__u32</entry>
	    <entry><structfield>max_width</structfield></entry>
	    <entry>Maximum frame width [pixel].</entry>
	  </row>
	  <row>
	    <entry>__u32</entry>
	    <entry><structfield>step_width</structfield></entry>
	    <entry>Frame width step size [pixel].</entry>
	  </row>
	  <row>
	    <entry>__u32</entry>
	    <entry><structfield>min_height</structfield></entry>
	    <entry>Minimum frame height [pixel].</entry>
	  </row>
	  <row>
	    <entry>__u32</entry>
	    <entry><structfield>max_height</structfield></entry>
	    <entry>Maximum frame height [pixel].</entry>
	  </row>
	  <row>
	    <entry>__u32</entry>
	    <entry><structfield>step_height</structfield></entry>
	    <entry>Frame height step size [pixel].</entry>
	  </row>
	</tbody>
      </tgroup>
    </table>

    <table pgwide="1" frame="none" id="v4l2-frmsizeenum">
      <title>struct <structname>v4l2_frmsizeenum</structname></title>
      <tgroup cols="4">
	<colspec colname="c1" />
	<colspec colname="c2" />
	<colspec colname="c3" />
	<colspec colname="c4" />
	<tbody valign="top">
	  <row>
	    <entry>__u32</entry>
	    <entry><structfield>index</structfield></entry>
	    <entry></entry>
	    <entry>IN: Index of the given frame size in the enumeration.</entry>
	  </row>
	  <row>
	    <entry>__u32</entry>
	    <entry><structfield>pixel_format</structfield></entry>
	    <entry></entry>
	    <entry>IN: Pixel format for which the frame sizes are enumerated.</entry>
	  </row>
	  <row>
	    <entry>__u32</entry>
	    <entry><structfield>type</structfield></entry>
	    <entry></entry>
	    <entry>OUT: Frame size type the device supports.</entry>
	  </row>
	  <row>
	    <entry>union</entry>
	    <entry></entry>
	    <entry></entry>
	    <entry>OUT: Frame size with the given index.</entry>
	  </row>
	  <row>
	    <entry></entry>
	    <entry>&v4l2-frmsize-discrete;</entry>
	    <entry><structfield>discrete</structfield></entry>
	    <entry></entry>
	  </row>
	  <row>
	    <entry></entry>
	    <entry>&v4l2-frmsize-stepwise;</entry>
	    <entry><structfield>stepwise</structfield></entry>
	    <entry></entry>
	  </row>
	  <row>
	    <entry>__u32</entry>
	    <entry><structfield>reserved[2]</structfield></entry>
	    <entry></entry>
	    <entry>Reserved space for future use.</entry>
	  </row>
	</tbody>
      </tgroup>
    </table>
  </refsect1>

  <refsect1>
    <title>Enums</title>

    <table pgwide="1" frame="none" id="v4l2-frmsizetypes">
      <title>enum <structname>v4l2_frmsizetypes</structname></title>
      <tgroup cols="3">
	&cs-def;
	<tbody valign="top">
	  <row>
	    <entry><constant>V4L2_FRMSIZE_TYPE_DISCRETE</constant></entry>
	    <entry>1</entry>
	    <entry>Discrete frame size.</entry>
	  </row>
	  <row>
	    <entry><constant>V4L2_FRMSIZE_TYPE_CONTINUOUS</constant></entry>
	    <entry>2</entry>
	    <entry>Continuous frame size.</entry>
	  </row>
	  <row>
	    <entry><constant>V4L2_FRMSIZE_TYPE_STEPWISE</constant></entry>
	    <entry>3</entry>
	    <entry>Step-wise defined frame size.</entry>
	  </row>
	</tbody>
      </tgroup>
    </table>
  </refsect1>

  <refsect1>
    &return-value;

    <para>See the description section above for a list of return
values that <varname>errno</varname> can have.</para>
  </refsect1>
</refentry>

<!--
Local Variables:
mode: sgml
sgml-parent-document: "v4l2.sgml"
indent-tabs-mode: nil
End:
-->
